{"version":3,"file":"core.js","sources":["node_modules/sticky-module/esm/index.js","node_modules/basic-devtools/esm/index.js","node_modules/@ungap/structured-clone/esm/deserialize.js","node_modules/@ungap/structured-clone/esm/types.js","node_modules/@ungap/structured-clone/esm/serialize.js","node_modules/@ungap/structured-clone/esm/json.js","node_modules/coincident/esm/channel.js","node_modules/proxy-target/esm/types.js","node_modules/proxy-target/esm/traps.js","node_modules/coincident/esm/shared/traps.js","node_modules/coincident/esm/fallback.js","node_modules/coincident/esm/index.js","node_modules/gc-hook/esm/index.js","node_modules/proxy-target/esm/array.js","node_modules/coincident/esm/shared/utils.js","node_modules/coincident/esm/shared/main.js","node_modules/coincident/esm/window/main.js","node_modules/coincident/esm/window/thread.js","node_modules/coincident/esm/shared/thread.js","node_modules/coincident/esm/shared/worker.js","node_modules/coincident/esm/window.js","node_modules/@ungap/with-resolvers/index.js","esm/fetch-utils.js","node_modules/codedent/esm/index.js","node_modules/plain-tag/esm/index.js","node_modules/html-escaper/esm/index.js","esm/utils.js","esm/interpreter/_utils.js","esm/interpreter/_python.js","esm/interpreter/micropython.js","esm/interpreter/pyodide.js","esm/interpreter/ruby-wasm-wasi.js","esm/interpreter/wasmoon.js","esm/interpreters.js","esm/toml.js","esm/loader.js","esm/hooks.js","esm/worker/hook.js","esm/worker/class.js","esm/worker/xworker.js","esm/errors.js","esm/worker/url.js","esm/script-handler.js","esm/listeners.js","esm/xworker.js","esm/custom.js","esm/index.js"],"sourcesContent":["/**\n * Allow leaking a module globally to help avoid conflicting exports\n * if the module might have been re-bundled in other projects.\n * @template T\n * @param {string} name the module name to save or retrieve\n * @param {T} value the module as value to save if not known\n * @param {globalThis} [global=globalThis] the reference where modules are saved where `globalThis` is the default\n * @returns {[T, boolean]} the passed `value` or the previous one as first entry, a boolean indicating if it was known or not\n */\nconst stickyModule = (name, value, global = globalThis) => {\n  const symbol = Symbol.for(name);\n  const known = symbol in global;\n  return [\n    known ?\n      global[symbol] :\n      Object.defineProperty(global, symbol, { value })[symbol],\n    known\n  ];\n};\n\nexport default stickyModule;\n","/**\n * Given a CSS selector, returns the first matching node, if any.\n * @param {string} css the CSS selector to query\n * @param {Document | DocumentFragment | Element} [root] the optional parent node to query\n * @returns {Element?} the found element, if any\n */\nconst $ = (css, root = document) => root.querySelector(css);\n\n/**\n * Given a CSS selector, returns a list of all matching nodes.\n * @param {string} css the CSS selector to query\n * @param {Document | DocumentFragment | Element} [root] the optional parent node to query\n * @returns {Element[]} a list of found nodes\n */\nconst $$ = (css, root = document) => [...root.querySelectorAll(css)];\n\n/**\n * Given a XPath selector, returns a list of all matching nodes.\n * @param {string} path the XPath selector to evaluate\n * @param {Document | DocumentFragment | Element} [root] the optional parent node to query\n * @returns {Node[]} a list of found nodes (elements, attributes, text, comments)\n */\nconst $x = (path, root = document) => {\n  const expression = (new XPathEvaluator).createExpression(path);\n  const xpath = expression.evaluate(root, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE);\n  const result = [];\n  for (let i = 0, {snapshotLength} = xpath; i < snapshotLength; i++)\n    result.push(xpath.snapshotItem(i));\n  return result;\n};\n\nexport {$, $$, $x};\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type)\n          return as([type, [...value]], value);\n  \n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","/*! (c) Andrea Giammarchi - ISC */\n\nimport {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\nconst {parse: $parse, stringify: $stringify} = JSON;\nconst options = {json: true, lossy: true};\n\n/**\n * Revive a previously stringified structured clone.\n * @param {string} str previously stringified data as string.\n * @returns {any} whatever was previously stringified as clone.\n */\nexport const parse = str => deserialize($parse(str));\n\n/**\n * Represent a structured clone value as string.\n * @param {any} any some clone-able value to stringify.\n * @returns {string} the value stringified.\n */\nexport const stringify = any => $stringify(serialize(any, options));\n","// ⚠️ AUTOMATICALLY GENERATED - DO NOT CHANGE\nexport const CHANNEL = '8e239207-5d0c-4e5b-be5f-e352858459c8';\n\nexport const MAIN = 'M' + CHANNEL;\nexport const THREAD = 'T' + CHANNEL;\n","export const ARRAY     = 'array';\nexport const BIGINT    = 'bigint';\nexport const BOOLEAN   = 'boolean';\nexport const FUNCTION  = 'function';\nexport const NULL      = 'null';\nexport const NUMBER    = 'number';\nexport const OBJECT    = 'object';\nexport const STRING    = 'string';\nexport const SYMBOL    = 'symbol';\nexport const UNDEFINED = 'undefined';\n","export const APPLY                        = 'apply';\nexport const CONSTRUCT                    = 'construct';\nexport const DEFINE_PROPERTY              = 'defineProperty';\nexport const DELETE_PROPERTY              = 'deleteProperty';\nexport const GET                          = 'get';\nexport const GET_OWN_PROPERTY_DESCRIPTOR  = 'getOwnPropertyDescriptor';\nexport const GET_PROTOTYPE_OF             = 'getPrototypeOf';\nexport const HAS                          = 'has';\nexport const IS_EXTENSIBLE                = 'isExtensible';\nexport const OWN_KEYS                     = 'ownKeys';\nexport const PREVENT_EXTENSION            = 'preventExtensions';\nexport const SET                          = 'set';\nexport const SET_PROTOTYPE_OF             = 'setPrototypeOf';\n","export * from 'proxy-target/traps';\nexport const DELETE = 'delete';\n","// encodeURIComponent('onmessage=({data:b})=>(Atomics.wait(b,0),postMessage(0))')\n\nexport default buffer => ({\n  value: new Promise(onmessage => {\n    let w = new Worker('data:application/javascript,onmessage%3D(%7Bdata%3Ab%7D)%3D%3E(Atomics.wait(b%2C0)%2CpostMessage(0))');\n    w.onmessage = onmessage;\n    w.postMessage(buffer);\n  })\n});\n","/*! (c) Andrea Giammarchi - ISC */\n\nimport {FUNCTION} from 'proxy-target/types';\n\nimport {CHANNEL} from './channel.js';\nimport {GET, HAS, SET} from './shared/traps.js';\nimport waitAsyncFallback from './fallback.js';\n\n// just minifier friendly for Blob Workers' cases\nconst {Int32Array, Map, SharedArrayBuffer, Uint16Array} = globalThis;\n\n// common constants / utilities for repeated operations\nconst {BYTES_PER_ELEMENT: I32_BYTES} = Int32Array;\nconst {BYTES_PER_ELEMENT: UI16_BYTES} = Uint16Array;\n\nconst {isArray} = Array;\nconst {notify, wait, waitAsync} = Atomics;\n\nconst waitInterrupt = (sb, delay, handler) => {\n  while (wait(sb, 0, 0, delay) === 'timed-out')\n    handler();\n};\n\n// retain buffers to transfer\nconst buffers = new WeakSet;\n\n// retain either main threads or workers global context\nconst context = new WeakMap;\n\nconst syncResult = {value: {then: fn => fn()}};\n\n// used to generate a unique `id` per each worker `postMessage` \"transaction\"\nlet uid = 0;\n\n/**\n * @typedef {Object} Interrupt used to sanity-check interrupts while waiting synchronously.\n * @prop {function} [handler] a callback invoked every `delay` milliseconds.\n * @prop {number} [delay=42] define `handler` invokes in terms of milliseconds.\n */\n\n/**\n * Create once a `Proxy` able to orchestrate synchronous `postMessage` out of the box.\n * @param {globalThis | Worker} self the context in which code should run\n * @param {{parse: (serialized: string) => any, stringify: (serializable: any) => string, transform?: (value:any) => any, interrupt?: () => void | Interrupt}} [JSON] an optional `JSON` like interface to `parse` or `stringify` content with extra `transform` ability.\n * @returns {ProxyHandler<globalThis> | ProxyHandler<Worker>}\n */\nconst coincident = (self, {parse = JSON.parse, stringify = JSON.stringify, transform, interrupt} = JSON) => {\n  // create a Proxy once for the given context (globalThis or Worker instance)\n  if (!context.has(self)) {\n    // ensure the CHANNEL and data are posted correctly\n    const post = (transfer, ...args) => self.postMessage({[CHANNEL]: args}, {transfer});\n\n    const handler = typeof interrupt === FUNCTION ? interrupt : interrupt?.handler;\n    const delay = interrupt?.delay || 42;\n    const decoder = new TextDecoder('utf-16');\n\n    // automatically uses sync wait (worker -> main)\n    // or fallback to async wait (main -> worker)\n    const waitFor = (isAsync, sb) => isAsync ?\n      (waitAsync || waitAsyncFallback)(sb, 0) :\n      ((handler ? waitInterrupt(sb, delay, handler) : wait(sb, 0)), syncResult);\n\n    // prevent Harakiri https://github.com/WebReflection/coincident/issues/18\n    let seppuku = false;\n\n    context.set(self, new Proxy(new Map, {\n      // there is very little point in checking prop in proxy for this very specific case\n      // and I don't want to orchestrate a whole roundtrip neither, as stuff would fail\n      // regardless if from Worker we access non existent Main callback, and vice-versa.\n      // This is here mostly to guarantee that if such check is performed, at least the\n      // get trap goes through and then it's up to developers guarantee they are accessing\n      // stuff that actually exists elsewhere.\n      [HAS]: (_, action) => typeof action === 'string' && !action.startsWith('_'),\n\n      // worker related: get any utility that should be available on the main thread\n      [GET]: (_, action) => action === 'then' ? null : ((...args) => {\n        // transaction id\n        const id = uid++;\n\n        // first contact: just ask for how big the buffer should be\n        // the value would be stored at index [1] while [0] is just control\n        let sb = new Int32Array(new SharedArrayBuffer(I32_BYTES * 2));\n\n        // if a transfer list has been passed, drop it from args\n        let transfer = [];\n        if (buffers.has(args.at(-1) || transfer))\n          buffers.delete(transfer = args.pop());\n\n        // ask for invoke with arguments and wait for it\n        post(transfer, id, sb, action, transform ? args.map(transform) : args);\n\n        // helps deciding how to wait for results\n        const isAsync = self !== globalThis;\n\n        // warn users about possible deadlock still allowing them\n        // to explicitly `proxy.invoke().then(...)` without blocking\n        let deadlock = 0;\n        if (seppuku && isAsync)\n          deadlock = setTimeout(console.warn, 1000, `💀🔒 - Possible deadlock if proxy.${action}(...args) is awaited`);\n\n        return waitFor(isAsync, sb).value.then(() => {\n          clearTimeout(deadlock);\n\n          // commit transaction using the returned / needed buffer length\n          const length = sb[1];\n\n          // filter undefined results\n          if (!length) return;\n\n          // calculate the needed ui16 bytes length to store the result string\n          const bytes = UI16_BYTES * length;\n\n          // round up to the next amount of bytes divided by 4 to allow i32 operations\n          sb = new Int32Array(new SharedArrayBuffer(bytes + (bytes % I32_BYTES)));\n\n          // ask for results and wait for it\n          post([], id, sb);\n          return waitFor(isAsync, sb).value.then(() => parse(\n            decoder.decode(new Uint16Array(sb.buffer).slice(0, length)))\n          );\n        });\n      }),\n\n      // main thread related: react to any utility a worker is asking for\n      [SET](actions, action, callback) {\n        const type = typeof callback;\n        if (type !== FUNCTION)\n          throw new Error(`Unable to assign ${action} as ${type}`);\n        // lazy event listener and logic handling, triggered once by setters actions\n        if (!actions.size) {\n          // maps results by `id` as they are asked for\n          const results = new Map;\n          // add the event listener once (first defined setter, all others work the same)\n          self.addEventListener('message', async (event) => {\n            // grub the very same library CHANNEL; ignore otherwise\n            const details = event.data?.[CHANNEL];\n            if (isArray(details)) {\n              // if early enough, avoid leaking data to other listeners\n              event.stopImmediatePropagation();\n              const [id, sb, ...rest] = details;\n              let error;\n              // action available: it must be defined/known on the main thread\n              if (rest.length) {\n                const [action, args] = rest;\n                if (actions.has(action)) {\n                  seppuku = true;\n                  try {\n                    // await for result either sync or async and serialize it\n                    const result = await actions.get(action)(...args);\n                    if (result !== void 0) {\n                      const serialized = stringify(transform ? transform(result) : result);\n                      // store the result for \"the very next\" event listener call\n                      results.set(id, serialized);\n                      // communicate the required SharedArrayBuffer length out of the\n                      // resulting serialized string\n                      sb[1] = serialized.length;\n                    }\n                  }\n                  catch (_) {\n                    error = _;\n                  }\n                  finally {\n                    seppuku = false;\n                  }\n                }\n                // unknown action should be notified as missing on the main thread\n                else {\n                  error = new Error(`Unsupported action: ${action}`);\n                }\n                // unlock the wait lock later on\n                sb[0] = 1;\n              }\n              // no action means: get results out of the well known `id`\n              // wait lock automatically unlocked here as no `0` value would\n              // possibly ever land at index `0`\n              else {\n                const result = results.get(id);\n                results.delete(id);\n                // populate the SharedArrayBuffer with utf-16 chars code\n                for (let ui16a = new Uint16Array(sb.buffer), i = 0; i < result.length; i++)\n                  ui16a[i] = result.charCodeAt(i);\n              }\n              // release te worker waiting either the length or the result\n              notify(sb, 0);\n              if (error) throw error;\n            }\n          });\n        }\n        // store this action callback allowing the setter in the process\n        return !!actions.set(action, callback);\n      }\n    }));\n  }\n  return context.get(self);\n};\n\ncoincident.transfer = (...args) => (buffers.add(args), args);\n\nexport default coincident;\n","// (c) Andrea Giammarchi - ISC\n\nconst registry = new FinalizationRegistry(\n  ([onGarbageCollected, held, debug]) => {\n    if (debug) console.debug(`Held value ${String(held)} not relevant anymore`);\n    onGarbageCollected(held);\n  }\n);\n\nconst handler = Object.create(null);\n\n/**\n * Register a generic reference to hold in memory, returning either an explicit replacement for it, if specified as optional extra option, or just a `ProxyHandler<hold>` to allow the GC to collect such proxy later on.\n * @template {object} H\n * @template R\n * @param {H} hold the reference to retain in memory until the returned value is not collected.\n * @param {(held:H) => void} onGarbageCollected the callback to invoke once the returned value is collected.\n * @param {{debug?: true, return?:R, token?:H | false}} [options] optionally override the returned value or the token to unregister. If `debug` is true it will log once FinalizationRegistry kicked in.\n * @returns {R | ProxyHandler<typeof hold>} a transparent proxy for the held reference or whatever override was passed as `return` field of the options.\n */\nexport const create = (\n  hold,\n  onGarbageCollected,\n  { debug, return: R, token = hold } = handler\n) => {\n  // if no reference to return is defined,\n  // create a proxy for the held one and register that instead.\n  const target = R || new Proxy(hold, handler);\n  const args = [target, [onGarbageCollected, hold, !!debug]];\n  if (token !== false) args.push(token);\n  // register the target reference in a way that\n  // the `onGarbageCollected(held)` callback will eventually notify.\n  registry.register(...args);\n  return target;\n};\n\n/**\n * If previously registered as either `token` or `hold` value, allow explicit removal of the entry in the registry.\n * @param {unknown} token the token used during registration. If no `token` was passed, this can be the same `hold` reference.\n * @returns {boolean} `true` if successfully unregistered.\n */\nexport const drop = token => registry.unregister(token);\n","import { ARRAY, FUNCTION, NULL, OBJECT } from './types.js';\n\n/** @typedef {import(\"./types.js\").BIGINT} BIGINT */\n/** @typedef {import(\"./types.js\").BOOLEAN} BOOLEAN */\n/** @typedef {import(\"./types.js\").NULL} NULL */\n/** @typedef {import(\"./types.js\").NUMBER} NUMBER */\n/** @typedef {import(\"./types.js\").STRING} STRING */\n/** @typedef {import(\"./types.js\").SYMBOL} SYMBOL */\n/** @typedef {import(\"./types.js\").UNDEFINED} UNDEFINED */\n\n/**\n * @template V\n * @typedef {() => V} Bound\n */\n\n/**\n * @template T, V\n * @typedef {{type:T, value:V}} Obj\n */\n\n/**\n * @template V\n * @typedef {[ARRAY, V]} Arr\n */\n\nconst { isArray } = Array;\n\n/**\n * @template {string} T\n * @template V\n * @param {T} type\n * @param {V} value\n * @returns {T extends typeof ARRAY ? Arr<V> : Obj<T, V>}\n */\n// @ts-ignore\nexport const pair = (type, value) => (\n  type === ARRAY ? [ARRAY, value] : {type, value}\n);\n\nconst unwrapDefault = (_, value) => value;\n\n/**\n * @template W, T, V\n * @param {W} wrap\n * @returns {W extends Function ? W : W extends Arr<V> ? W[1] : W extends Obj<T, V> ? W[\"value\"] : never}\n */\nexport const unwrap = (wrap, revive = unwrapDefault) => {\n  let type = typeof wrap, value = wrap;\n  if (type === OBJECT) {\n    if (isArray(wrap))\n      [ type, value ] = wrap;\n    else\n      // @ts-ignore\n      ({ type, value } = wrap);\n  }\n  return revive(type, value);\n};\n\nconst wrapDefault = (type, value) => (\n  type === FUNCTION ? value : pair(type, value)\n);\n\n/**\n * Returns a `{type, value}` pair if the value is not a function and not an array.\n * It returns the function or the array as they are otherwise.\n * @template V\n * @param {V} value\n * @param {Function} [resolve]\n * @returns {V extends Function ? V : V extends Array ? Arr<V> : Obj<V extends bigint ? BIGINT : V extends boolean ? BOOLEAN : V extends null ? NULL : V extends number ? NUMBER : V extends string ? STRING : V extends symbol ? SYMBOL : V extends undefined ? UNDEFINED : OBJECT, V>}\n */\nexport const wrap = (value, resolve = wrapDefault) => {\n  const type = value === null ? NULL : typeof value;\n  return resolve(type === OBJECT && isArray(value) ? ARRAY : type, value);\n};\n\n/**\n * @template V\n * @param {V} value\n * @returns {Bound<V>}\n */\nexport const bound = value => what.bind(value);\n\n/**\n * @template V, T\n * @param {V} value\n * @returns {V extends Bound<T> ? ReturnType<V> : V}\n */\nexport const unbound = value => (\n  typeof value === FUNCTION ?\n    (/** @type {Function} */ (value))() :\n    value\n);\n\nfunction what() {\n  'use strict';\n  return this;\n}\n","import {\n  ARRAY,\n  OBJECT,\n  FUNCTION,\n  BOOLEAN,\n  NUMBER,\n  STRING,\n  UNDEFINED,\n  BIGINT,\n  SYMBOL,\n  NULL,\n} from 'proxy-target/types';\n\nimport { pair, wrap } from 'proxy-target/array';\n\nconst {\n  defineProperty,\n  deleteProperty,\n  getOwnPropertyDescriptor,\n  getPrototypeOf,\n  isExtensible,\n  ownKeys,\n  preventExtensions,\n  set,\n  setPrototypeOf\n} = Reflect;\n\nconst {assign, create} = Object;\n\nexport const TypedArray = getPrototypeOf(Int8Array);\n\nexport {\n  assign,\n  create,\n  defineProperty,\n  deleteProperty,\n  getOwnPropertyDescriptor,\n  getPrototypeOf,\n  isExtensible,\n  ownKeys,\n  preventExtensions,\n  set,\n  setPrototypeOf\n};\n\nexport const augment = (descriptor, how) => {\n  const {get, set, value} = descriptor;\n  if (get) descriptor.get = how(get);\n  if (set) descriptor.set = how(set);\n  if (value) descriptor.value = how(value);\n  return descriptor;\n};\n\nexport const asEntry = transform => value => wrap(value, (type, value) => {\n  switch (type) {\n    case NULL:\n      return pair(NULL, value);\n    case OBJECT:\n      if (value === globalThis)\n        return pair(type, null);\n    case ARRAY:\n    case FUNCTION:\n      return transform(type, value);\n    case BOOLEAN:\n    case NUMBER:\n    case STRING:\n    case UNDEFINED:\n    case BIGINT:\n      return pair(type, value);\n    case SYMBOL: {\n      if (symbols.has(value))\n        return pair(type, symbols.get(value));\n    }\n  }\n  throw new Error(`Unable to handle this ${type} type`);\n});\n\nconst symbols = new Map(\n  ownKeys(Symbol)\n    .filter(s => typeof Symbol[s] === SYMBOL)\n    .map(s => [Symbol[s], s])\n);\n\nexport const symbol = value => {\n  for (const [symbol, name] of symbols) {\n    if (name === value)\n      return symbol;\n  }\n};\n\nexport const transform = o => o;\n","import { create as createGCHook } from 'gc-hook';\n\nimport {\n  ARRAY,\n  OBJECT,\n  FUNCTION,\n  NUMBER,\n  STRING,\n  SYMBOL,\n  UNDEFINED,\n} from 'proxy-target/types';\n\nimport {\n  pair,\n  unwrap\n} from 'proxy-target/array';\n\nimport {\n  TypedArray,\n  defineProperty,\n  deleteProperty,\n  getOwnPropertyDescriptor,\n  getPrototypeOf,\n  isExtensible,\n  ownKeys,\n  preventExtensions,\n  set,\n  setPrototypeOf,\n\n  assign,\n  create,\n  augment,\n  asEntry,\n  symbol,\n  transform\n} from './utils.js';\n\nimport {\n  APPLY,\n  CONSTRUCT,\n  DEFINE_PROPERTY,\n  DELETE_PROPERTY,\n  GET,\n  GET_OWN_PROPERTY_DESCRIPTOR,\n  GET_PROTOTYPE_OF,\n  HAS,\n  IS_EXTENSIBLE,\n  OWN_KEYS,\n  PREVENT_EXTENSION,\n  SET,\n  SET_PROTOTYPE_OF,\n  DELETE\n} from './traps.js';\n\nexport default (name, patch) => {\n  const eventsHandler = patch && new WeakMap;\n\n  // patch once main UI tread\n  if (patch) {\n    const { addEventListener } = EventTarget.prototype;\n    // this should never be on the way as it's extremely light and fast\n    // but it's necessary to allow \"preventDefault\" or other event invokes at distance\n    defineProperty(EventTarget.prototype, 'addEventListener', {\n      value(type, listener, ...options) {\n        if (options.at(0)?.invoke) {\n          if (!eventsHandler.has(this))\n            eventsHandler.set(this, new Map);\n          eventsHandler.get(this).set(type, [].concat(options[0].invoke));\n          delete options[0].invoke;\n        }\n        return addEventListener.call(this, type, listener, ...options);\n      }\n    });\n  }\n\n  const handleEvent = patch && (event => {\n    const {currentTarget, target, type} = event;\n    for (const method of eventsHandler.get(currentTarget || target)?.get(type) || [])\n      event[method]();\n  });\n\n  return function (thread, MAIN, THREAD, ...args) {\n    let id = 0, $ = this?.transform || transform;\n    const ids = new Map;\n    const values = new Map;\n\n    const {[THREAD]: __thread__} = thread;\n\n    const global = args.length ? assign(create(globalThis), ...args) : globalThis;\n\n    const result = asEntry((type, value) => {\n      if (!ids.has(value)) {\n        let sid;\n        // a bit apocalyptic scenario but if this main runs forever\n        // and the id does a whole int32 roundtrip we might have still\n        // some reference dangling around\n        while (values.has(sid = id++));\n        ids.set(value, sid);\n        values.set(sid, type === FUNCTION ? value : $(value));\n      }\n      return pair(type, ids.get(value));\n    });\n\n    const onGarbageCollected = value => {\n      __thread__(DELETE, pair(STRING, value));\n    };\n\n    const asValue = (type, value) => {\n      switch (type) {\n        case OBJECT:\n          if (value == null) return global;\n        case ARRAY:\n          if (typeof value === NUMBER) return values.get(value);\n          if (!(value instanceof TypedArray)) {\n            for (const key in value)\n              value[key] = target(value[key]);\n          }\n          return value;\n        case FUNCTION:\n          if (typeof value === STRING) {\n            if (!values.has(value)) {\n              const cb = function (...args) {\n                if (patch && args.at(0) instanceof Event) handleEvent(...args);\n                return __thread__(\n                  APPLY,\n                  pair(FUNCTION, value),\n                  result(this),\n                  args.map(result)\n                );\n              };\n              values.set(value, new WeakRef(cb));\n              return createGCHook(value, onGarbageCollected, {\n                return: cb,\n                token: false,\n              });\n            }\n            return values.get(value).deref();\n          }\n          return values.get(value);\n        case SYMBOL:\n          return symbol(value);\n      }\n      return value;\n    };\n\n    const target = entry => unwrap(entry, asValue);\n\n    const trapsHandler = {\n      [APPLY]: (target, thisArg, args) => result(target.apply(thisArg, args)),\n      [CONSTRUCT]: (target, args) => result(new target(...args)),\n      [DEFINE_PROPERTY]: (target, name, descriptor) => result(defineProperty(target, name, descriptor)),\n      [DELETE_PROPERTY]: (target, name) => result(deleteProperty(target, name)),\n      [GET_PROTOTYPE_OF]: target => result(getPrototypeOf(target)),\n      [GET]: (target, name) => result(target[name]),\n      [GET_OWN_PROPERTY_DESCRIPTOR]: (target, name) => {\n        const descriptor = getOwnPropertyDescriptor(target, name);\n        return descriptor ? pair(OBJECT, augment(descriptor, result)) : pair(UNDEFINED, descriptor);\n      },\n      [HAS]: (target, name) => result(name in target),\n      [IS_EXTENSIBLE]: target => result(isExtensible(target)),\n      [OWN_KEYS]: target => pair(ARRAY, ownKeys(target).map(result)),\n      [PREVENT_EXTENSION]: target => result(preventExtensions(target)),\n      [SET]: (target, name, value) => result(set(target, name, value)),\n      [SET_PROTOTYPE_OF]: (target, proto) => result(setPrototypeOf(target, proto)),\n      [DELETE](id) {\n        ids.delete(values.get(id));\n        values.delete(id);\n      }\n    };\n\n    thread[MAIN] = (trap, entry, ...args) => {\n      switch (trap) {\n        case APPLY:\n          args[0] = target(args[0]);\n          args[1] = args[1].map(target);\n          break;\n        case CONSTRUCT:\n          args[0] = args[0].map(target);\n          break;\n        case DEFINE_PROPERTY: {\n          const [name, descriptor] = args;\n          args[0] = target(name);\n          const {get, set, value} = descriptor;\n          if (get) descriptor.get = target(get);\n          if (set) descriptor.set = target(set);\n          if (value) descriptor.value = target(value);\n          break;\n        }\n        default:\n          args = args.map(target);\n          break;\n      }\n      return trapsHandler[trap](target(entry), ...args);\n    };\n\n    return {\n      proxy: thread,\n      [name.toLowerCase()]: global,\n      [`is${name}Proxy`]: () => false\n    };\n  };\n};\n","import main from '../shared/main.js';\n\nexport default main('Window', true);\n","import thread from '../shared/thread.js';\n\nexport default thread('Window');\n","import { create as createGCHook } from 'gc-hook';\n\nimport {\n  ARRAY,\n  OBJECT,\n  FUNCTION,\n  NUMBER,\n  STRING,\n  SYMBOL,\n} from 'proxy-target/types';\n\nimport {\n  pair, unwrap,\n  bound, unbound,\n} from 'proxy-target/array';\n\nimport {\n  TypedArray,\n  augment,\n  asEntry,\n  symbol,\n  transform,\n} from './utils.js';\n\nimport {\n  APPLY,\n  CONSTRUCT,\n  DEFINE_PROPERTY,\n  DELETE_PROPERTY,\n  GET,\n  GET_OWN_PROPERTY_DESCRIPTOR,\n  GET_PROTOTYPE_OF,\n  HAS,\n  IS_EXTENSIBLE,\n  OWN_KEYS,\n  PREVENT_EXTENSION,\n  SET,\n  SET_PROTOTYPE_OF,\n  DELETE\n} from './traps.js';\n\nexport default name => {\n  let id = 0;\n  const ids = new Map;\n  const values = new Map;\n\n  const __proxy__ = Symbol();\n\n  return function (main, MAIN, THREAD) {\n    const $ = this?.transform || transform;\n    const { [MAIN]: __main__ } = main;\n\n    const proxies = new Map;\n\n    const onGarbageCollected = value => {\n      proxies.delete(value);\n      __main__(DELETE, argument(value));\n    };\n\n    const argument = asEntry(\n      (type, value) => {\n        if (__proxy__ in value)\n          return unbound(value[__proxy__]);\n        if (type === FUNCTION) {\n          value = $(value);\n          if (!values.has(value)) {\n            let sid;\n            // a bit apocalyptic scenario but if this thread runs forever\n            // and the id does a whole int32 roundtrip we might have still\n            // some reference dangling around\n            while (values.has(sid = String(id++)));\n            ids.set(value, sid);\n            values.set(sid, value);\n          }\n          return pair(type, ids.get(value));\n        }\n        if (!(value instanceof TypedArray)) {\n          if (type === OBJECT || type === ARRAY)\n            value = $(value);\n          for(const key in value)\n            value[key] = argument(value[key]);\n        }\n        return pair(type, value);\n      }\n    );\n\n    const register = (entry, type, value) => {\n      if (!proxies.has(value)) {\n        const target = type === FUNCTION ? bound(entry) : entry;\n        const proxy = new Proxy(target, proxyHandler);\n        proxies.set(value, new WeakRef(proxy));\n        return createGCHook(value, onGarbageCollected, {\n          return: proxy,\n          token: false,\n        });\n      }\n      return proxies.get(value).deref();\n    };\n\n    const fromEntry = entry => unwrap(entry, (type, value) => {\n      switch (type) {\n        case OBJECT:\n          if (value === null) return globalThis;\n        case ARRAY:\n          return typeof value === NUMBER ? register(entry, type, value) : value;\n        case FUNCTION:\n          return typeof value === STRING ? values.get(value) : register(entry, type, value);\n        case SYMBOL:\n          return symbol(value);\n      }\n      return value;\n    });\n\n    const result = (TRAP, target, ...args) => fromEntry(__main__(TRAP, unbound(target), ...args));\n\n    const proxyHandler = {\n      [APPLY]: (target, thisArg, args) => result(APPLY, target, argument(thisArg), args.map(argument)),\n      [CONSTRUCT]: (target, args) => result(CONSTRUCT, target, args.map(argument)),\n      [DEFINE_PROPERTY]: (target, name, descriptor) => {\n        const { get, set, value } = descriptor;\n        if (typeof get === FUNCTION) descriptor.get = argument(get);\n        if (typeof set === FUNCTION) descriptor.set = argument(set);\n        if (typeof value === FUNCTION) descriptor.value = argument(value);\n        return result(DEFINE_PROPERTY, target, argument(name), descriptor);\n      },\n      [DELETE_PROPERTY]: (target, name) => result(DELETE_PROPERTY, target, argument(name)),\n      [GET_PROTOTYPE_OF]: target => result(GET_PROTOTYPE_OF, target),\n      [GET]: (target, name) => name === __proxy__ ? target : result(GET, target, argument(name)),\n      [GET_OWN_PROPERTY_DESCRIPTOR]: (target, name) => {\n        const descriptor = result(GET_OWN_PROPERTY_DESCRIPTOR, target, argument(name));\n        return descriptor && augment(descriptor, fromEntry);\n      },\n      [HAS]: (target, name) => name === __proxy__ || result(HAS, target, argument(name)),\n      [IS_EXTENSIBLE]: target => result(IS_EXTENSIBLE, target),\n      [OWN_KEYS]: target => result(OWN_KEYS, target).map(fromEntry),\n      [PREVENT_EXTENSION]: target => result(PREVENT_EXTENSION, target),\n      [SET]: (target, name, value) => result(SET, target, argument(name), argument(value)),\n      [SET_PROTOTYPE_OF]: (target, proto) => result(SET_PROTOTYPE_OF, target, argument(proto)),\n    };\n\n    main[THREAD] = (trap, entry, ctx, args) => {\n      switch (trap) {\n        case APPLY:\n          return fromEntry(entry).apply(fromEntry(ctx), args.map(fromEntry));\n        case DELETE: {\n          const id = fromEntry(entry);\n          ids.delete(values.get(id));\n          values.delete(id);\n        }\n      }\n    };\n\n    const global = new Proxy(pair(OBJECT, null), proxyHandler);\n\n    return {\n      [name.toLowerCase()]: global,\n      [`is${name}Proxy`]: value => typeof value === OBJECT && !!value && __proxy__ in value,\n      proxy: main\n    };\n  };\n};\n","import {FUNCTION} from 'proxy-target/types';\nexport default typeof Worker === FUNCTION ? Worker : class {};\n","import {MAIN, THREAD} from './channel.js';\nimport $coincident from './index.js';\nimport main from './window/main.js';\nimport thread from './window/thread.js';\nimport Worker from './shared/worker.js';\n\nconst proxies = new WeakMap;\n\n/**\n * @typedef {object} Coincident\n * @property {ProxyHandler<globalThis>} proxy\n * @property {ProxyHandler<Window>} window\n * @property {(value: any) => boolean} isWindowProxy\n */\n\n/**\n * Create once a `Proxy` able to orchestrate synchronous `postMessage` out of the box.\n * In workers, returns a `{proxy, window, isWindowProxy}` namespace to reach main globals synchronously.\n * @param {Worker | globalThis} self the context in which code should run\n * @returns {ProxyHandler<Worker> | Coincident}\n */\nconst coincident = (self, ...args) => {\n  const proxy = $coincident(self, ...args);\n  if (!proxies.has(proxy)) {\n    const util = self instanceof Worker ? main : thread;\n    proxies.set(proxy, util.call(args.at(0), proxy, MAIN, THREAD));\n  }\n  return proxies.get(proxy);\n}\n\ncoincident.transfer = $coincident.transfer;\n\nexport default coincident;\n","Promise.withResolvers || (Promise.withResolvers = function withResolvers() {\n  var a, b, c = new this(function (resolve, reject) {\n    a = resolve;\n    b = reject;\n  });\n  return {resolve: a, reject: b, promise: c};\n});\n","/** @param {Response} response */\nexport const getBuffer = (response) => response.arrayBuffer();\n\n/** @param {Response} response */\nexport const getJSON = (response) => response.json();\n\n/** @param {Response} response */\nexport const getText = (response) => response.text();\n","import content from 'plain-tag';\n\nconst dedent = {\n  object(...args) {\n    return this.string(content(...args));\n  },\n  string(content) {\n    for (const line of content.split(/[\\r\\n]+/)) {\n      // skip initial empty lines\n      if (line.trim().length) {\n        // trap indentation at the very first line of code\n        if (/^(\\s+)/.test(line))\n          content = content.replace(new RegExp('^' + RegExp.$1, 'gm'), '');\n        // no indentation? all good: get out of here!\n        break;\n      }\n    }\n    return content;\n  }\n};\n\n/**\n * Usable both as template literal tag or just as callback for strings, removes all spaces found\n * at the very first line of code encountered while sanitizing, keeping everything else around.\n * @param {string | TemplateStringsArray} tpl either code as string or as template, when used as tag\n * @param  {...any} values the template interpolations, when used as tag\n * @returns {string} code without undesired indentation\n */\nconst codedent = (tpl, ...values) => dedent[typeof tpl](tpl, ...values);\n\nexport default codedent;\n","export default function (t) {\n  for (var s = t[0], i = 1, l = arguments.length; i < l; i++)\n    s += arguments[i] + t[i];\n  return s;\n};\n","/**\n * Copyright (C) 2017-present by Andrea Giammarchi - @WebReflection\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nconst {replace} = '';\n\n// escape\nconst es = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g;\nconst ca = /[&<>'\"]/g;\n\nconst esca = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  \"'\": '&#39;',\n  '\"': '&quot;'\n};\nconst pe = m => esca[m];\n\n/**\n * Safely escape HTML entities such as `&`, `<`, `>`, `\"`, and `'`.\n * @param {string} es the input to safely escape\n * @returns {string} the escaped input, and it **throws** an error if\n *  the input type is unexpected, except for boolean and numbers,\n *  converted as string.\n */\nexport const escape = es => replace.call(es, ca, pe);\n\n\n// unescape\nconst unes = {\n  '&amp;': '&',\n  '&#38;': '&',\n  '&lt;': '<',\n  '&#60;': '<',\n  '&gt;': '>',\n  '&#62;': '>',\n  '&apos;': \"'\",\n  '&#39;': \"'\",\n  '&quot;': '\"',\n  '&#34;': '\"'\n};\nconst cape = m => unes[m];\n\n/**\n * Safely unescape previously escaped entities such as `&`, `<`, `>`, `\"`,\n * and `'`.\n * @param {string} un a previously escaped string\n * @returns {string} the unescaped input, and it **throws** an error if\n *  the input type is unexpected, except for boolean and numbers,\n *  converted as string.\n */\nexport const unescape = un => replace.call(un, es, cape);\n","import $dedent from 'codedent';\nimport { unescape as $unescape } from 'html-escaper';\nimport { io } from './interpreter/_utils.js';\n\n/** @type {(tpl: string | TemplateStringsArray, ...values:any[]) => string} */\nconst dedent = $dedent;\n\n/** @type {(value:string) => string} */\nconst unescape = $unescape;\n\nconst { isArray } = Array;\n\nconst { assign, create, defineProperties, defineProperty, entries } = Object;\n\nconst { all, resolve } = new Proxy(Promise, {\n    get: ($, name) => $[name].bind($),\n});\n\nconst absoluteURL = (path, base = location.href) =>\n    new URL(path, base.replace(/^blob:/, '')).href;\n\n/* c8 ignore start */\nlet id = 0;\nconst nodeInfo = (node, type) => ({\n    id: node.id || (node.id = `${type}-w${id++}`),\n    tag: node.tagName\n});\n\n/**\n * Notify the main thread about element \"readiness\".\n * @param {HTMLScriptElement | HTMLElement} target the script or custom-type element\n * @param {string} type the custom/type as event prefix\n * @param {string} what the kind of event to dispatch, i.e. `ready` or `done`\n * @param {boolean} [worker = false] `true` if dispatched form a worker, `false` by default if in main\n * @param {globalThis.CustomEvent} [CustomEvent = globalThis.CustomEvent] the `CustomEvent` to use\n */\nconst dispatch = (target, type, what, worker = false, CE = CustomEvent) => {\n    target.dispatchEvent(\n        new CE(`${type}:${what}`, {\n            bubbles: true,\n            detail: { worker },\n        })\n    );\n};\n\nexport const createFunction = value => Function(`'use strict';return (${value})`)();\n\nexport const createResolved = (module, type, config, interpreter) => ({\n    type,\n    config,\n    interpreter,\n    io: io.get(interpreter),\n    run: (code, ...args) => module.run(interpreter, code, ...args),\n    runAsync: (code, ...args) => module.runAsync(interpreter, code, ...args),\n    runEvent: (...args) => module.runEvent(interpreter, ...args),\n});\n\nexport const createOverload = (module, name) => ($, pre) => {\n    const method = module[name].bind(module);\n    module[name] = (interpreter, code, ...args) =>\n        method(interpreter, `${pre ? $ : code}\\n${pre ? code : $}`, ...args);\n};\n/* c8 ignore stop */\n\nexport {\n    dedent, unescape,\n    dispatch,\n    isArray,\n    assign,\n    create,\n    defineProperties,\n    defineProperty,\n    entries,\n    all,\n    resolve,\n    absoluteURL,\n    nodeInfo,\n};\n","import '@ungap/with-resolvers';\n\nimport { getBuffer } from '../fetch-utils.js';\nimport { absoluteURL, all, entries, isArray } from '../utils.js';\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport const io = new WeakMap();\nexport const stdio = (init) => {\n    const context = init || console;\n    const localIO = {\n        stderr: (context.stderr || console.error).bind(context),\n        stdout: (context.stdout || console.log).bind(context),\n    };\n    return {\n        stderr: (...args) => localIO.stderr(...args),\n        stdout: (...args) => localIO.stdout(...args),\n        async get(engine) {\n            const interpreter = await engine;\n            io.set(interpreter, localIO);\n            return interpreter;\n        },\n    };\n};\n\n// This should be the only helper needed for all Emscripten based FS exports\nexport const writeFile = ({ FS, PATH, PATH_FS }, path, buffer) => {\n    const absPath = PATH_FS.resolve(path);\n    FS.mkdirTree(PATH.dirname(absPath));\n    return FS.writeFile(absPath, new Uint8Array(buffer), {\n        canOwn: true,\n    });\n};\n/* c8 ignore stop */\n\n// This is instead a fallback for Lua or others\nexport const writeFileShim = (FS, path, buffer) => {\n    mkdirTree(FS, dirname(path));\n    path = resolve(FS, path);\n    return FS.writeFile(path, new Uint8Array(buffer), { canOwn: true });\n};\n\nconst dirname = (path) => {\n    const tree = path.split('/');\n    tree.pop();\n    return tree.join('/');\n};\n\nconst mkdirTree = (FS, path) => {\n    const current = [];\n    for (const branch of path.split('/')) {\n        if (branch === '.') continue;\n        current.push(branch);\n        if (branch) FS.mkdir(current.join('/'));\n    }\n};\n\nconst resolve = (FS, path) => {\n    const tree = [];\n    for (const branch of path.split('/')) {\n        switch (branch) {\n            case '':\n                break;\n            case '.':\n                break;\n            case '..':\n                tree.pop();\n                break;\n            default:\n                tree.push(branch);\n        }\n    }\n    return [FS.cwd()].concat(tree).join('/').replace(/^\\/+/, '/');\n};\n\nconst calculateFetchPaths = (config_fetch) => {\n    // REQUIRES INTEGRATION TEST\n    /* c8 ignore start */\n    for (const { files, to_file, from = '' } of config_fetch) {\n        if (files !== undefined && to_file !== undefined)\n            throw new Error(\n                'Cannot use \\'to_file\\' and \\'files\\' parameters together!',\n            );\n        if (files === undefined && to_file === undefined && from.endsWith('/'))\n            throw new Error(\n                `Couldn't determine the filename from the path ${from}, please supply 'to_file' parameter.`,\n            );\n    }\n    /* c8 ignore stop */\n    return config_fetch.flatMap(\n        ({ from = '', to_folder = '.', to_file, files }) => {\n            if (isArray(files))\n                return files.map((file) => ({\n                    url: joinPaths([from, file]),\n                    path: joinPaths([to_folder, file]),\n                }));\n            const filename = to_file || from.slice(1 + from.lastIndexOf('/'));\n            return [{ url: from, path: joinPaths([to_folder, filename]) }];\n        },\n    );\n};\n\nconst joinPaths = (parts) => {\n    const res = parts\n        .map((part) => part.trim().replace(/(^[/]*|[/]*$)/g, ''))\n        .filter((p) => p !== '' && p !== '.')\n        .join('/');\n\n    return parts[0].startsWith('/') ? `/${res}` : res;\n};\n\nconst fetchResolved = (config_fetch, url) =>\n    fetch(absoluteURL(url, base.get(config_fetch)));\n\nexport const base = new WeakMap();\n\n/* c8 ignore start */\nexport const fetchPaths = (module, interpreter, config_fetch) =>\n    all(\n        calculateFetchPaths(config_fetch).map(({ url, path }) =>\n            fetchResolved(config_fetch, url)\n                .then(getBuffer)\n                .then((buffer) => module.writeFile(interpreter, path, buffer)),\n        ),\n    );\n\n    const fillName = (source, dest) => dest.endsWith('/') ?\n                        `${dest}${source.split('/').pop()}` : dest;\n\nconst parseTemplate = (src, map) => src.replace(\n  /\\{.+?\\}/g,\n  k => {\n    if (!map.has(k))\n      throw new SyntaxError(`Invalid template: ${k}`);\n    return map.get(k);\n  }\n);\n\nconst calculateFilesPaths = files => {\n  const map = new Map;\n  const targets = new Set;\n  const sourceDest = [];\n  for (const [source, dest] of entries(files)) {\n    if (/^\\{.+\\}$/.test(source)) {\n      if (map.has(source))\n        throw new SyntaxError(`Duplicated template: ${source}`);\n      map.set(source, parseTemplate(dest, map));\n    }\n    else {\n      const url = parseTemplate(source, map);\n      const path = fillName(url, parseTemplate(dest || './', map));\n      if (targets.has(path))\n        throw new SyntaxError(`Duplicated destination: ${path}`);\n      targets.add(path);\n      sourceDest.push({ url, path });\n    }\n  }\n  return sourceDest;\n};\n\nexport const fetchFiles = (module, interpreter, config_files) =>\n    all(\n        calculateFilesPaths(config_files).map(({ url, path }) =>\n            fetchResolved(config_files, url)\n                .then(getBuffer)\n                .then((buffer) => module.writeFile(interpreter, path, buffer)),\n        ),\n    );\n\nexport const fetchJSModules = (module, interpreter, js_modules) => {\n    const modules = [];\n    for (const [source, name] of entries(js_modules)) {\n        modules.push(import(source).then(\n            esm => {\n                module.registerJSModule(interpreter, name, { ...esm });\n            },\n            err => {\n                console.warn(`Unable to register ${name} due ${err}`);\n            }\n        ));\n    }\n    return all(modules);\n};\n/* c8 ignore stop */\n","import { dedent } from '../utils.js';\nimport { io } from './_utils.js';\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport const registerJSModule = (interpreter, name, value) => {\n    interpreter.registerJsModule(name, value);\n};\n\nexport const run = (interpreter, code, ...args) => {\n    try {\n        return interpreter.runPython(dedent(code), ...args);\n    }\n    catch (error) {\n        io.get(interpreter).stderr(error);\n    }\n};\n\nexport const runAsync = async (interpreter, code, ...args) => {\n    try {\n        return await interpreter.runPythonAsync(dedent(code), ...args);\n    }\n    catch (error) {\n        io.get(interpreter).stderr(error);\n    }\n};\n\nexport const runEvent = async (interpreter, code, event) => {\n    // allows method(event) as well as namespace.method(event)\n    // it does not allow fancy brackets names for now\n    const [name, ...keys] = code.split('.');\n    let target = interpreter.globals.get(name);\n    let context;\n    for (const key of keys) [context, target] = [target, target[key]];\n    try {\n        await target.call(context, event);\n    }\n    catch (error) {\n        io.get(interpreter).stderr(error);\n    }\n};\n/* c8 ignore stop */\n","import { fetchFiles, fetchJSModules, fetchPaths, stdio, writeFile } from './_utils.js';\nimport { registerJSModule, run, runAsync, runEvent } from './_python.js';\n\nconst type = 'micropython';\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport default {\n    type,\n    module: (version = '1.20.0-297') =>\n        `https://cdn.jsdelivr.net/npm/@micropython/micropython-webassembly-pyscript@${version}/micropython.mjs`,\n    async engine({ loadMicroPython }, config, url) {\n        const { stderr, stdout, get } = stdio();\n        url = url.replace(/\\.m?js$/, '.wasm');\n        const interpreter = await get(loadMicroPython({ stderr, stdout, url }));\n        if (config.files) await fetchFiles(this, interpreter, config.files);\n        if (config.fetch) await fetchPaths(this, interpreter, config.fetch);\n        if (config.js_modules) await fetchJSModules(this, interpreter, config.js_modules);\n        return interpreter;\n    },\n    registerJSModule,\n    run,\n    runAsync,\n    runEvent,\n    transform: (_, value) => value,\n    writeFile: ({ FS, _module: { PATH, PATH_FS } }, path, buffer) =>\n        writeFile({ FS, PATH, PATH_FS }, path, buffer),\n};\n/* c8 ignore stop */\n","import { fetchFiles, fetchJSModules, fetchPaths, stdio, writeFile } from './_utils.js';\nimport { registerJSModule, run, runAsync, runEvent } from './_python.js';\n\nconst type = 'pyodide';\nconst toJsOptions = { dict_converter: Object.fromEntries };\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport default {\n    type,\n    module: (version = '0.24.1') =>\n        `https://cdn.jsdelivr.net/pyodide/v${version}/full/pyodide.mjs`,\n    async engine({ loadPyodide }, config, url) {\n        const { stderr, stdout, get } = stdio();\n        const indexURL = url.slice(0, url.lastIndexOf('/'));\n        const interpreter = await get(\n            loadPyodide({ stderr, stdout, indexURL }),\n        );\n        if (config.files) await fetchFiles(this, interpreter, config.files);\n        if (config.fetch) await fetchPaths(this, interpreter, config.fetch);\n        if (config.js_modules) await fetchJSModules(this, interpreter, config.js_modules);\n        if (config.packages) {\n            await interpreter.loadPackage('micropip');\n            const micropip = await interpreter.pyimport('micropip');\n            await micropip.install(config.packages, { keep_going: true });\n            micropip.destroy();\n        }\n        return interpreter;\n    },\n    registerJSModule,\n    run,\n    runAsync,\n    runEvent,\n    transform: (interpreter, value) => (\n        value instanceof interpreter.ffi.PyProxy ?\n            value.toJs(toJsOptions) :\n            value\n    ),\n    writeFile: ({ FS, PATH, _module: { PATH_FS } }, path, buffer) =>\n        writeFile({ FS, PATH, PATH_FS }, path, buffer),\n};\n/* c8 ignore stop */\n","import { dedent } from '../utils.js';\nimport { fetchFiles, fetchPaths } from './_utils.js';\n\nconst type = 'ruby-wasm-wasi';\nconst jsType = type.replace(/\\W+/g, '_');\n\n// MISSING:\n//  * there is no VFS apparently or I couldn't reach any\n//  * I've no idea how to override the stderr and stdout\n//  * I've no idea how to import packages\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport default {\n    type,\n    experimental: true,\n    module: (version = '2.2.0') =>\n        `https://cdn.jsdelivr.net/npm/ruby-3_2-wasm-wasi@${version}/dist/browser.esm.js`,\n    async engine({ DefaultRubyVM }, config, url) {\n        const response = await fetch(\n            `${url.slice(0, url.lastIndexOf('/'))}/ruby.wasm`,\n        );\n        const module = await WebAssembly.compile(await response.arrayBuffer());\n        const { vm: interpreter } = await DefaultRubyVM(module);\n        if (config.files) await fetchFiles(this, interpreter, config.files);\n        if (config.fetch) await fetchPaths(this, interpreter, config.fetch);\n        return interpreter;\n    },\n    // Fallback to globally defined module fields (i.e. $xworker)\n    registerJSModule(interpreter, name, value) {\n        const id = `__module_${jsType}_${name}`;\n        globalThis[id] = value;\n        this.run(interpreter, `require \"js\";$${name}=JS.global[:${id}]`);\n        delete globalThis[id];\n    },\n    run: (interpreter, code, ...args) => interpreter.eval(dedent(code), ...args),\n    runAsync: (interpreter, code, ...args) => interpreter.evalAsync(dedent(code), ...args),\n    async runEvent(interpreter, code, event) {\n        // patch common xworker.onmessage/onerror cases\n        if (/^xworker\\.(on\\w+)$/.test(code)) {\n            const { $1: name } = RegExp;\n            const id = `__module_${jsType}_event`;\n            globalThis[id] = event;\n            this.run(\n                interpreter,\n                `require \"js\";$xworker.call(\"${name}\",JS.global[:${id}])`,\n            );\n            delete globalThis[id];\n        } else {\n            // Experimental: allows only events by fully qualified method name\n            const method = this.run(interpreter, `method(:${code})`);\n            await method.call(code, interpreter.wrap(event));\n        }\n    },\n    transform: (_, value) => value,\n    writeFile: () => {\n        throw new Error(`writeFile is not supported in ${type}`);\n    },\n};\n/* c8 ignore stop */\n","import { dedent } from '../utils.js';\nimport { fetchFiles, fetchPaths, io, stdio, writeFileShim } from './_utils.js';\n\nconst type = 'wasmoon';\n\n// MISSING:\n//  * I've no idea how to import packages\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport default {\n    type,\n    module: (version = '1.15.1') =>\n        `https://cdn.jsdelivr.net/npm/wasmoon@${version}/+esm`,\n    async engine({ LuaFactory, LuaLibraries }, config) {\n        const { stderr, stdout, get } = stdio();\n        const interpreter = await get(new LuaFactory().createEngine());\n        interpreter.global.getTable(LuaLibraries.Base, (index) => {\n            interpreter.global.setField(index, 'print', stdout);\n            interpreter.global.setField(index, 'printErr', stderr);\n        });\n        if (config.files) await fetchFiles(this, interpreter, config.files);\n        if (config.fetch) await fetchPaths(this, interpreter, config.fetch);\n        return interpreter;\n    },\n    // Fallback to globally defined module fields\n    registerJSModule: (interpreter, name, value) => {\n        interpreter.global.set(name, value);\n    },\n    run: (interpreter, code, ...args) => {\n        try {\n            return interpreter.doStringSync(dedent(code), ...args);\n        }\n        catch (error) {\n            io.get(interpreter).stderr(error);\n        }\n    },\n    runAsync: async (interpreter, code, ...args) => {\n        try {\n            return await interpreter.doString(dedent(code), ...args);\n        }\n        catch (error) {\n            io.get(interpreter).stderr(error);\n        }\n    },\n    runEvent: async (interpreter, code, event) => {\n        // allows method(event) as well as namespace.method(event)\n        // it does not allow fancy brackets names for now\n        const [name, ...keys] = code.split('.');\n        let target = interpreter.global.get(name);\n        let context;\n        for (const key of keys) [context, target] = [target, target[key]];\n        try {\n            await target.call(context, event);\n        }\n        catch (error) {\n            io.get(interpreter).stderr(error);\n        }\n    },\n    transform: (_, value) => value,\n    writeFile: (\n        {\n            cmodule: {\n                module: { FS },\n            },\n        },\n        path,\n        buffer,\n    ) => writeFileShim(FS, path, buffer),\n};\n/* c8 ignore stop */\n","// ⚠️ Part of this file is automatically generated\n//    The :RUNTIMES comment is a delimiter and no code should be written/changed after\n//    See rollup/build_interpreters.cjs to know more\n\nimport { base } from './interpreter/_utils.js';\n\n/** @type {Map<string, object>} */\nexport const registry = new Map();\n\n/** @type {Map<string, object>} */\nexport const configs = new Map();\n\n/** @type {string[]} */\nexport const selectors = [];\n\n/** @type {string[]} */\nexport const prefixes = [];\n\nexport const interpreter = new Proxy(new Map(), {\n    get(map, id) {\n        if (!map.has(id)) {\n            const [type, ...rest] = id.split('@');\n            const interpreter = registry.get(type);\n            const url = /^(?:\\.?\\.?\\/|https?:\\/\\/)/i.test(rest) \n                ? rest.join('@')\n                : interpreter.module(...rest);\n            map.set(id, {\n                url,\n                module: import(/* webpackIgnore: true */url),\n                engine: interpreter.engine.bind(interpreter),\n            });\n        }\n        const { url, module, engine } = map.get(id);\n        return (config, baseURL) =>\n            module.then((module) => {\n                configs.set(id, config);\n                for (const entry of ['files', 'fetch']) {\n                    const value = config?.[entry];\n                    if (value) base.set(value, baseURL);\n                }\n                return engine(module, config, url);\n            });\n    },\n});\n\nconst register = (interpreter) => {\n    for (const type of [].concat(interpreter.type)) {\n        registry.set(type, interpreter);\n        selectors.push(`script[type=\"${type}\"]`);\n        prefixes.push(`${type}-`);\n    }\n};\n\n//:RUNTIMES\nimport micropython from './interpreter/micropython.js';\nimport pyodide from './interpreter/pyodide.js';\nimport ruby_wasm_wasi from './interpreter/ruby-wasm-wasi.js';\nimport wasmoon from './interpreter/wasmoon.js';\nfor (const interpreter of [micropython, pyodide, ruby_wasm_wasi, wasmoon])\n    register(interpreter);\n","// lazy TOML parser (fast-toml might be a better alternative)\nconst TOML_LIB = 'https://cdn.jsdelivr.net/npm/basic-toml@0.3.1/es.js';\n\n/**\n * @param {string} text TOML text to parse\n * @returns {object} the resulting JS object\n */\nexport const parse = async (text) => (await import(/* webpackIgnore: true */TOML_LIB)).parse(text);\n","import { interpreter } from './interpreters.js';\nimport { absoluteURL, resolve } from './utils.js';\nimport { parse } from './toml.js';\nimport { getJSON, getText } from './fetch-utils.js';\n\nexport const getConfigURLAndType = config => {\n    // REQUIRES INTEGRATION TEST\n    /* c8 ignore start */\n    let type = typeof config;\n    if (type === 'string' && /\\.(json|toml|txt)$/.test(config))\n        type = RegExp.$1;\n    else\n        config = './config.txt';\n    return [absoluteURL(config), type];\n    /* c8 ignore stop */\n};\n\n/**\n * Parse a generic config if it came from an attribute either as URL\n * or as a serialized string. In XWorker case, accepts a pre-defined\n * options to use as it is to avoid needing at all a fetch operation.\n * In latter case, config will be suffixed as `config.txt`.\n * @param {string} id the interpreter name @ version identifier\n * @param {string} [config] optional config file to parse\n * @param {object} [options] optional options used to bootstrap XWorker\n * @returns\n */\nexport const getRuntime = (id, config, options = {}) => {\n    if (config) {\n        // REQUIRES INTEGRATION TEST\n        /* c8 ignore start */\n        const [absolute, type] = getConfigURLAndType(config);\n        if (type === 'json') {\n            options = fetch(absolute).then(getJSON);\n        } else if (type === 'toml') {\n            options = fetch(absolute).then(getText).then(parse);\n        } else if (type === 'string') {\n            try {\n                options = JSON.parse(config);\n            } catch (_) {\n                options = parse(config);\n            }\n        } else if (type === 'object' && config) {\n            options = config;\n        }\n        config = absolute;\n        /* c8 ignore stop */\n    }\n    return resolve(options).then(options => interpreter[id](options, config));\n};\n\n/**\n * @param {string} type the interpreter type\n * @param {string} [version] the optional interpreter version\n * @returns\n */\nexport const getRuntimeID = (type, version = '') =>\n    `${type}@${version}`.replace(/@$/, '');\n","import { registry } from './interpreters.js';\n\nconst beforeRun = 'BeforeRun';\nconst afterRun = 'AfterRun';\n\nexport const code = [\n    `code${beforeRun}`,\n    `code${beforeRun}Async`,\n    `code${afterRun}`,\n    `code${afterRun}Async`,\n];\n\nexport const js = [\n    'onWorker',\n    'onReady',\n    `on${beforeRun}`,\n    `on${beforeRun}Async`,\n    `on${afterRun}`,\n    `on${afterRun}Async`,\n];\n\n/* c8 ignore start */\n// create a copy of the resolved wrapper with the original\n// run and runAsync so that, if used within onBeforeRun/Async\n// or onAfterRun/Async polluted entries won't matter and just\n// the native utilities will be available without seppuku.\n// The same applies if called within `onReady` worker hook.\nexport function patch(resolved, interpreter) {\n    const { run, runAsync } = registry.get(this.type);\n    return {\n        ...resolved,\n        run: run.bind(this, interpreter),\n        runAsync: runAsync.bind(this, interpreter)\n    };\n}\n\n/**\n * Created the wrapper to pass along hooked callbacks.\n * @param {object} module the details module\n * @param {object} ref the node or reference to pass as second argument\n * @param {boolean} isAsync if run should be async\n * @param {function?} before callback to run before\n * @param {function?} after callback to run after\n * @returns {object}\n */\nexport const polluteJS = (module, resolved, ref, isAsync, before, after) => {\n    if (before || after) {\n        const patched = patch.bind(module, resolved);\n        const name = isAsync ? 'runAsync' : 'run';\n        const method = module[name];\n        module[name] = isAsync ?\n            async function (interpreter, code, ...args) {\n                if (before) await before.call(this, patched(interpreter), ref);\n                const result = await method.call(\n                    this,\n                    interpreter,\n                    code,\n                    ...args\n                );\n                if (after) await after.call(this, patched(interpreter), ref);\n                return result;\n            } :\n            function (interpreter, code, ...args) {\n                if (before) before.call(this, patched(interpreter), ref);\n                const result = method.call(this, interpreter, code, ...args);\n                if (after) after.call(this, patched(interpreter), ref);\n                return result;\n            }\n        ;\n    }\n};\n/* c8 ignore stop */\n","import { dedent } from '../utils.js';\nimport { js as jsHooks, code as codeHooks } from '../hooks.js';\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\nexport default class Hook {\n    constructor(interpreter, hooks = {}) {\n        const { main, worker } = hooks;\n        this.interpreter = interpreter;\n        this.onWorker = main?.onWorker;\n        // ignore onWorker as that's main only\n        for (const key of jsHooks.slice(1))\n            this[key] = worker?.[key];\n        for (const key of codeHooks)\n            this[key] = worker?.[key];\n    }\n    toJSON() {\n        const hooks = {};\n        // ignore onWorker as that's main only\n        for (const key of jsHooks.slice(1)) {\n            if (this[key]) hooks[key] = String(this[key]);\n        }\n        // code related: exclude `onReady` callback\n        for (const key of codeHooks) {\n            if (this[key]) hooks[key] = dedent(this[key]());\n        }\n        return hooks;\n    }\n}\n/* c8 ignore stop */\n","import * as JSON from '@ungap/structured-clone/json';\nimport coincident from 'coincident/window';\nimport xworker from './xworker.js';\nimport { getConfigURLAndType } from '../loader.js';\nimport { assign, create, defineProperties } from '../utils.js';\nimport { getText } from '../fetch-utils.js';\nimport Hook from './hook.js';\n\n/**\n * @typedef {Object} WorkerOptions custom configuration\n * @prop {string} type the interpreter type to use\n * @prop {string} [version] the optional interpreter version to use\n * @prop {string} [config] the optional config to use within such interpreter\n */\n\nexport default (...args) =>\n    /**\n     * A XWorker is a Worker facade able to bootstrap a channel with any desired interpreter.\n     * @param {string} url the remote file to evaluate on bootstrap\n     * @param {WorkerOptions} [options] optional arguments to define the interpreter to use\n     * @returns {Worker}\n     */\n    function XWorker(url, options) {\n        const worker = xworker();\n        const { postMessage } = worker;\n        const isHook = this instanceof Hook;\n\n        if (args.length) {\n            const [type, version] = args;\n            options = assign({}, options || { type, version });\n            if (!options.type) options.type = type;\n        }\n\n        // provide a base url to fetch or load config files from a Worker\n        // because there's no location at all in the Worker as it's embedded.\n        // fallback to a generic, ignored, config.txt file to still provide a URL.\n        const [ config ] = getConfigURLAndType(options.config);\n\n        const bootstrap = fetch(url)\n            .then(getText)\n            .then(code => {\n                const hooks = isHook ? this.toJSON() : void 0;\n                postMessage.call(worker, { options, config, code, hooks });\n            });\n\n        defineProperties(worker, {\n            postMessage: {\n                value: (data, ...rest) =>\n                    bootstrap.then(() =>\n                        postMessage.call(worker, data, ...rest),\n                    ),\n            },\n            sync: {\n                value: coincident(worker, JSON).proxy,\n            },\n            onerror: {\n                writable: true,\n                configurable: true,\n                value: console.error\n            }\n        });\n\n        worker.addEventListener('message', event => {\n            const { data } = event;\n            if (data instanceof Error) {\n                event.stopImmediatePropagation();\n                worker.onerror(create(event, {\n                    type: { value: 'error' },\n                    error: { value: data }\n                }));\n            }\n        });\n\n        if (isHook) this.onWorker?.(this.interpreter, worker);\n\n        return worker;\n    };\n","/* c8 ignore next */\nexport default () => new Worker(URL.createObjectURL(new Blob([\"const e=\\\"object\\\"==typeof self?self:globalThis,t=t=>((t,r)=>{const n=(e,r)=>(t.set(r,e),e),s=o=>{if(t.has(o))return t.get(o);const[a,i]=r[o];switch(a){case 0:case-1:return n(i,o);case 1:{const e=n([],o);for(const t of i)e.push(s(t));return e}case 2:{const e=n({},o);for(const[t,r]of i)e[s(t)]=s(r);return e}case 3:return n(new Date(i),o);case 4:{const{source:e,flags:t}=i;return n(new RegExp(e,t),o)}case 5:{const e=n(new Map,o);for(const[t,r]of i)e.set(s(t),s(r));return e}case 6:{const e=n(new Set,o);for(const t of i)e.add(s(t));return e}case 7:{const{name:t,message:r}=i;return n(new e[t](r),o)}case 8:return n(BigInt(i),o);case\\\"BigInt\\\":return n(Object(BigInt(i)),o)}return n(new e[a](i),o)};return s})(new Map,t)(0),r=\\\"\\\",{toString:n}={},{keys:s}=Object,o=e=>{const t=typeof e;if(\\\"object\\\"!==t||!e)return[0,t];const s=n.call(e).slice(8,-1);switch(s){case\\\"Array\\\":return[1,r];case\\\"Object\\\":return[2,r];case\\\"Date\\\":return[3,r];case\\\"RegExp\\\":return[4,r];case\\\"Map\\\":return[5,r];case\\\"Set\\\":return[6,r]}return s.includes(\\\"Array\\\")?[1,s]:s.includes(\\\"Error\\\")?[7,s]:[2,s]},a=([e,t])=>0===e&&(\\\"function\\\"===t||\\\"symbol\\\"===t),i=(e,{json:t,lossy:r}={})=>{const n=[];return((e,t,r,n)=>{const i=(e,t)=>{const s=n.push(e)-1;return r.set(t,s),s},c=n=>{if(r.has(n))return r.get(n);let[l,u]=o(n);switch(l){case 0:{let t=n;switch(u){case\\\"bigint\\\":l=8,t=n.toString();break;case\\\"function\\\":case\\\"symbol\\\":if(e)throw new TypeError(\\\"unable to serialize \\\"+u);t=null;break;case\\\"undefined\\\":return i([-1],n)}return i([l,t],n)}case 1:{if(u)return i([u,[...n]],n);const e=[],t=i([l,e],n);for(const t of n)e.push(c(t));return t}case 2:{if(u)switch(u){case\\\"BigInt\\\":return i([u,n.toString()],n);case\\\"Boolean\\\":case\\\"Number\\\":case\\\"String\\\":return i([u,n.valueOf()],n)}if(t&&\\\"toJSON\\\"in n)return c(n.toJSON());const r=[],f=i([l,r],n);for(const t of s(n))!e&&a(o(n[t]))||r.push([c(t),c(n[t])]);return f}case 3:return i([l,n.toISOString()],n);case 4:{const{source:e,flags:t}=n;return i([l,{source:e,flags:t}],n)}case 5:{const t=[],r=i([l,t],n);for(const[r,s]of n)(e||!a(o(r))&&!a(o(s)))&&t.push([c(r),c(s)]);return r}case 6:{const t=[],r=i([l,t],n);for(const r of n)!e&&a(o(r))||t.push(c(r));return r}}const{message:f}=n;return i([l,{name:u,message:f}],n)};return c})(!(t||r),!!t,new Map,n)(e),n},{parse:c,stringify:l}=JSON,u={json:!0,lossy:!0};var f=Object.freeze({__proto__:null,parse:e=>t(c(e)),stringify:e=>l(i(e,u))});const p=\\\"8e239207-5d0c-4e5b-be5f-e352858459c8\\\",d=\\\"M\\\"+p,y=\\\"T\\\"+p,h=\\\"array\\\",g=\\\"function\\\",w=\\\"null\\\",m=\\\"number\\\",b=\\\"object\\\",v=\\\"string\\\",$=\\\"symbol\\\",S=\\\"undefined\\\",E=\\\"apply\\\",A=\\\"construct\\\",P=\\\"defineProperty\\\",j=\\\"deleteProperty\\\",M=\\\"get\\\",k=\\\"getOwnPropertyDescriptor\\\",x=\\\"getPrototypeOf\\\",_=\\\"has\\\",T=\\\"isExtensible\\\",O=\\\"ownKeys\\\",W=\\\"preventExtensions\\\",F=\\\"set\\\",R=\\\"setPrototypeOf\\\",B=\\\"delete\\\";var J=e=>({value:new Promise((t=>{let r=new Worker(\\\"data:application/javascript,onmessage%3D(%7Bdata%3Ab%7D)%3D%3E(Atomics.wait(b%2C0)%2CpostMessage(0))\\\");r.onmessage=t,r.postMessage(e)}))})\\n/*! (c) Andrea Giammarchi - ISC */;const{Int32Array:I,Map:L,SharedArrayBuffer:D,Uint16Array:C}=globalThis,{BYTES_PER_ELEMENT:H}=I,{BYTES_PER_ELEMENT:N}=C,{isArray:U}=Array,{notify:z,wait:q,waitAsync:K}=Atomics,Y=new WeakSet,G=new WeakMap,V={value:{then:e=>e()}};let Q=0;const X=(e,{parse:t=JSON.parse,stringify:r=JSON.stringify,transform:n,interrupt:s}=JSON)=>{if(!G.has(e)){const o=(t,...r)=>e.postMessage({[p]:r},{transfer:t}),a=typeof s===g?s:s?.handler,i=s?.delay||42,c=new TextDecoder(\\\"utf-16\\\"),l=(e,t)=>e?(K||J)(t,0):(a?((e,t,r)=>{for(;\\\"timed-out\\\"===q(e,0,0,t);)r()})(t,i,a):q(t,0),V);let u=!1;G.set(e,new Proxy(new L,{[_]:(e,t)=>\\\"string\\\"==typeof t&&!t.startsWith(\\\"_\\\"),[M]:(r,s)=>\\\"then\\\"===s?null:(...r)=>{const a=Q++;let i=new I(new D(2*H)),f=[];Y.has(r.at(-1)||f)&&Y.delete(f=r.pop()),o(f,a,i,s,n?r.map(n):r);const p=e!==globalThis;let d=0;return u&&p&&(d=setTimeout(console.warn,1e3,`💀🔒 - Possible deadlock if proxy.${s}(...args) is awaited`)),l(p,i).value.then((()=>{clearTimeout(d);const e=i[1];if(!e)return;const r=N*e;return i=new I(new D(r+r%H)),o([],a,i),l(p,i).value.then((()=>t(c.decode(new C(i.buffer).slice(0,e)))))}))},[F](t,s,o){const a=typeof o;if(a!==g)throw new Error(`Unable to assign ${s} as ${a}`);if(!t.size){const s=new L;e.addEventListener(\\\"message\\\",(async e=>{const o=e.data?.[p];if(U(o)){e.stopImmediatePropagation();const[a,i,...c]=o;let l;if(c.length){const[e,o]=c;if(t.has(e)){u=!0;try{const c=await t.get(e)(...o);if(void 0!==c){const e=r(n?n(c):c);s.set(a,e),i[1]=e.length}}catch(e){l=e}finally{u=!1}}else l=new Error(`Unsupported action: ${e}`);i[0]=1}else{const e=s.get(a);s.delete(a);for(let t=new C(i.buffer),r=0;r<e.length;r++)t[r]=e.charCodeAt(r)}if(z(i,0),l)throw l}}))}return!!t.set(s,o)}}))}return G.get(e)};X.transfer=(...e)=>(Y.add(e),e);const Z=new FinalizationRegistry((([e,t,r])=>{r&&console.debug(`Held value ${String(t)} not relevant anymore`),e(t)})),ee=Object.create(null),te=(e,t,{debug:r,return:n,token:s=e}=ee)=>{const o=n||new Proxy(e,ee),a=[o,[t,e,!!r]];return!1!==s&&a.push(s),Z.register(...a),o},{isArray:re}=Array,ne=(e,t)=>e===h?[h,t]:{type:e,value:t},se=(e,t)=>t,oe=(e,t=se)=>{let r=typeof e,n=e;return r===b&&(re(e)?[r,n]=e:({type:r,value:n}=e)),t(r,n)},ae=(e,t)=>e===g?t:ne(e,t),ie=(e,t=ae)=>{const r=null===e?w:typeof e;return t(r===b&&re(e)?h:r,e)},ce=e=>typeof e===g?e():e;function le(){return this}const{defineProperty:ue,deleteProperty:fe,getOwnPropertyDescriptor:pe,getPrototypeOf:de,isExtensible:ye,ownKeys:he,preventExtensions:ge,set:we,setPrototypeOf:me}=Reflect,{assign:be,create:ve}=Object,$e=de(Int8Array),Se=(e,t)=>{const{get:r,set:n,value:s}=e;return r&&(e.get=t(r)),n&&(e.set=t(n)),s&&(e.value=t(s)),e},Ee=e=>t=>ie(t,((t,r)=>{switch(t){case w:return ne(w,r);case b:if(r===globalThis)return ne(t,null);case h:case g:return e(t,r);case\\\"boolean\\\":case m:case v:case S:case\\\"bigint\\\":return ne(t,r);case $:if(Ae.has(r))return ne(t,Ae.get(r))}throw new Error(`Unable to handle this ${t} type`)})),Ae=new Map(he(Symbol).filter((e=>typeof Symbol[e]===$)).map((e=>[Symbol[e],e]))),Pe=e=>{for(const[t,r]of Ae)if(r===e)return t},je=e=>e;var Me=((e,t)=>{const r=t&&new WeakMap;if(t){const{addEventListener:e}=EventTarget.prototype;ue(EventTarget.prototype,\\\"addEventListener\\\",{value(t,n,...s){return s.at(0)?.invoke&&(r.has(this)||r.set(this,new Map),r.get(this).set(t,[].concat(s[0].invoke)),delete s[0].invoke),e.call(this,t,n,...s)}})}const n=t&&(e=>{const{currentTarget:t,target:n,type:s}=e;for(const o of r.get(t||n)?.get(s)||[])e[o]()});return function(r,s,o,...a){let i=0,c=this?.transform||je;const l=new Map,u=new Map,{[o]:f}=r,p=a.length?be(ve(globalThis),...a):globalThis,d=Ee(((e,t)=>{if(!l.has(t)){let r;for(;u.has(r=i++););l.set(t,r),u.set(r,e===g?t:c(t))}return ne(e,l.get(t))})),y=e=>{f(B,ne(v,e))},w=(e,r)=>{switch(e){case b:if(null==r)return p;case h:if(typeof r===m)return u.get(r);if(!(r instanceof $e))for(const e in r)r[e]=J(r[e]);return r;case g:if(typeof r===v){if(!u.has(r)){const e=function(...e){return t&&e.at(0)instanceof Event&&n(...e),f(E,ne(g,r),d(this),e.map(d))};return u.set(r,new WeakRef(e)),te(r,y,{return:e,token:!1})}return u.get(r).deref()}return u.get(r);case $:return Pe(r)}return r},J=e=>oe(e,w),I={[E]:(e,t,r)=>d(e.apply(t,r)),[A]:(e,t)=>d(new e(...t)),[P]:(e,t,r)=>d(ue(e,t,r)),[j]:(e,t)=>d(fe(e,t)),[x]:e=>d(de(e)),[M]:(e,t)=>d(e[t]),[k]:(e,t)=>{const r=pe(e,t);return r?ne(b,Se(r,d)):ne(S,r)},[_]:(e,t)=>d(t in e),[T]:e=>d(ye(e)),[O]:e=>ne(h,he(e).map(d)),[W]:e=>d(ge(e)),[F]:(e,t,r)=>d(we(e,t,r)),[R]:(e,t)=>d(me(e,t)),[B](e){l.delete(u.get(e)),u.delete(e)}};return r[s]=(e,t,...r)=>{switch(e){case E:r[0]=J(r[0]),r[1]=r[1].map(J);break;case A:r[0]=r[0].map(J);break;case P:{const[e,t]=r;r[0]=J(e);const{get:n,set:s,value:o}=t;n&&(t.get=J(n)),s&&(t.set=J(s)),o&&(t.value=J(o));break}default:r=r.map(J)}return I[e](J(t),...r)},{proxy:r,[e.toLowerCase()]:p,[`is${e}Proxy`]:()=>!1}}})(\\\"Window\\\",!0),ke=(e=>{let t=0;const r=new Map,n=new Map,s=Symbol();return function(o,a,i){const c=this?.transform||je,{[a]:l}=o,u=new Map,f=e=>{u.delete(e),l(B,p(e))},p=Ee(((e,o)=>{if(s in o)return ce(o[s]);if(e===g){if(o=c(o),!n.has(o)){let e;for(;n.has(e=String(t++)););r.set(o,e),n.set(e,o)}return ne(e,r.get(o))}if(!(o instanceof $e)){e!==b&&e!==h||(o=c(o));for(const e in o)o[e]=p(o[e])}return ne(e,o)})),d=(e,t,r)=>{if(!u.has(r)){const n=t===g?(e=>le.bind(e))(e):e,s=new Proxy(n,S);return u.set(r,new WeakRef(s)),te(r,f,{return:s,token:!1})}return u.get(r).deref()},y=e=>oe(e,((t,r)=>{switch(t){case b:if(null===r)return globalThis;case h:return typeof r===m?d(e,t,r):r;case g:return typeof r===v?n.get(r):d(e,t,r);case $:return Pe(r)}return r})),w=(e,t,...r)=>y(l(e,ce(t),...r)),S={[E]:(e,t,r)=>w(E,e,p(t),r.map(p)),[A]:(e,t)=>w(A,e,t.map(p)),[P]:(e,t,r)=>{const{get:n,set:s,value:o}=r;return typeof n===g&&(r.get=p(n)),typeof s===g&&(r.set=p(s)),typeof o===g&&(r.value=p(o)),w(P,e,p(t),r)},[j]:(e,t)=>w(j,e,p(t)),[x]:e=>w(x,e),[M]:(e,t)=>t===s?e:w(M,e,p(t)),[k]:(e,t)=>{const r=w(k,e,p(t));return r&&Se(r,y)},[_]:(e,t)=>t===s||w(_,e,p(t)),[T]:e=>w(T,e),[O]:e=>w(O,e).map(y),[W]:e=>w(W,e),[F]:(e,t,r)=>w(F,e,p(t),p(r)),[R]:(e,t)=>w(R,e,p(t))};o[i]=(e,t,s,o)=>{switch(e){case E:return y(t).apply(y(s),o.map(y));case B:{const e=y(t);r.delete(n.get(e)),n.delete(e)}}};const J=new Proxy(ne(b,null),S);return{[e.toLowerCase()]:J,[`is${e}Proxy`]:e=>typeof e===b&&!!e&&s in e,proxy:o}}})(\\\"Window\\\"),xe=typeof Worker===g?Worker:class{};const _e=new WeakMap,Te=(e,...t)=>{const r=X(e,...t);if(!_e.has(r)){const n=e instanceof xe?Me:ke;_e.set(r,n.call(t.at(0),r,d,y))}return _e.get(r)};Te.transfer=X.transfer;const Oe={object(...e){return this.string(function(e){for(var t=e[0],r=1,n=arguments.length;r<n;r++)t+=arguments[r]+e[r];return t}(...e))},string(e){for(const t of e.split(/[\\\\r\\\\n]+/))if(t.trim().length){/^(\\\\s+)/.test(t)&&(e=e.replace(new RegExp(\\\"^\\\"+RegExp.$1,\\\"gm\\\"),\\\"\\\"));break}return e}};Promise.withResolvers||(Promise.withResolvers=function(){var e,t,r=new this((function(r,n){e=r,t=n}));return{resolve:e,reject:t,promise:r}});const We=e=>e.arrayBuffer(),Fe=e=>e.json(),Re=e=>e.text(),Be=new WeakMap,Je=e=>{const t=e||console,r={stderr:(t.stderr||console.error).bind(t),stdout:(t.stdout||console.log).bind(t)};return{stderr:(...e)=>r.stderr(...e),stdout:(...e)=>r.stdout(...e),async get(e){const t=await e;return Be.set(t,r),t}}},Ie=({FS:e,PATH:t,PATH_FS:r},n,s)=>{const o=r.resolve(n);return e.mkdirTree(t.dirname(o)),e.writeFile(o,new Uint8Array(s),{canOwn:!0})},Le=e=>{const t=e.split(\\\"/\\\");return t.pop(),t.join(\\\"/\\\")},De=(e,t)=>{const r=[];for(const n of t.split(\\\"/\\\"))\\\".\\\"!==n&&(r.push(n),n&&e.mkdir(r.join(\\\"/\\\")))},Ce=(e,t)=>{const r=[];for(const e of t.split(\\\"/\\\"))switch(e){case\\\"\\\":case\\\".\\\":break;case\\\"..\\\":r.pop();break;default:r.push(e)}return[e.cwd()].concat(r).join(\\\"/\\\").replace(/^\\\\/+/,\\\"/\\\")},He=e=>{const t=e.map((e=>e.trim().replace(/(^[/]*|[/]*$)/g,\\\"\\\"))).filter((e=>\\\"\\\"!==e&&\\\".\\\"!==e)).join(\\\"/\\\");return e[0].startsWith(\\\"/\\\")?`/${t}`:t},Ne=(e,t)=>fetch(ot(t,Ue.get(e))),Ue=new WeakMap,ze=(e,t,r)=>nt((e=>{for(const{files:t,to_file:r,from:n=\\\"\\\"}of e){if(void 0!==t&&void 0!==r)throw new Error(\\\"Cannot use 'to_file' and 'files' parameters together!\\\");if(void 0===t&&void 0===r&&n.endsWith(\\\"/\\\"))throw new Error(`Couldn't determine the filename from the path ${n}, please supply 'to_file' parameter.`)}return e.flatMap((({from:e=\\\"\\\",to_folder:t=\\\".\\\",to_file:r,files:n})=>{if(Qe(n))return n.map((r=>({url:He([e,r]),path:He([t,r])})));const s=r||e.slice(1+e.lastIndexOf(\\\"/\\\"));return[{url:e,path:He([t,s])}]}))})(r).map((({url:n,path:s})=>Ne(r,n).then(We).then((r=>e.writeFile(t,s,r)))))),qe=(e,t)=>t.endsWith(\\\"/\\\")?`${t}${e.split(\\\"/\\\").pop()}`:t,Ke=(e,t)=>e.replace(/\\\\{.+?\\\\}/g,(e=>{if(!t.has(e))throw new SyntaxError(`Invalid template: ${e}`);return t.get(e)})),Ye=(e,t,r)=>nt((e=>{const t=new Map,r=new Set,n=[];for(const[s,o]of rt(e))if(/^\\\\{.+\\\\}$/.test(s)){if(t.has(s))throw new SyntaxError(`Duplicated template: ${s}`);t.set(s,Ke(o,t))}else{const e=Ke(s,t),a=qe(e,Ke(o||\\\"./\\\",t));if(r.has(a))throw new SyntaxError(`Duplicated destination: ${a}`);r.add(a),n.push({url:e,path:a})}return n})(r).map((({url:n,path:s})=>Ne(r,n).then(We).then((r=>e.writeFile(t,s,r)))))),Ge=(e,t,r)=>{const n=[];for(const[s,o]of rt(r))n.push(import(s).then((r=>{e.registerJSModule(t,o,{...r})}),(e=>{console.warn(`Unable to register ${o} due ${e}`)})));return nt(n)},Ve=(e,...t)=>Oe[typeof e](e,...t),{isArray:Qe}=Array,{assign:Xe,create:Ze,defineProperties:et,defineProperty:tt,entries:rt}=Object,{all:nt,resolve:st}=new Proxy(Promise,{get:(e,t)=>e[t].bind(e)}),ot=(e,t=location.href)=>new URL(e,t.replace(/^blob:/,\\\"\\\")).href,at=(e,t,r,n=!1,s=CustomEvent)=>{e.dispatchEvent(new s(`${t}:${r}`,{bubbles:!0,detail:{worker:n}}))},it=e=>Function(`'use strict';return (${e})`)(),ct=(e,t,r)=>{e.registerJsModule(t,r)},lt=(e,t,...r)=>{try{return e.runPython(Ve(t),...r)}catch(t){Be.get(e).stderr(t)}},ut=async(e,t,...r)=>{try{return await e.runPythonAsync(Ve(t),...r)}catch(t){Be.get(e).stderr(t)}},ft=async(e,t,r)=>{const[n,...s]=t.split(\\\".\\\");let o,a=e.globals.get(n);for(const e of s)[o,a]=[a,a[e]];try{await a.call(o,r)}catch(t){Be.get(e).stderr(t)}};var pt={type:\\\"micropython\\\",module:(e=\\\"1.20.0-297\\\")=>`https://cdn.jsdelivr.net/npm/@micropython/micropython-webassembly-pyscript@${e}/micropython.mjs`,async engine({loadMicroPython:e},t,r){const{stderr:n,stdout:s,get:o}=Je();r=r.replace(/\\\\.m?js$/,\\\".wasm\\\");const a=await o(e({stderr:n,stdout:s,url:r}));return t.files&&await Ye(this,a,t.files),t.fetch&&await ze(this,a,t.fetch),t.js_modules&&await Ge(this,a,t.js_modules),a},registerJSModule:ct,run:lt,runAsync:ut,runEvent:ft,transform:(e,t)=>t,writeFile:({FS:e,_module:{PATH:t,PATH_FS:r}},n,s)=>Ie({FS:e,PATH:t,PATH_FS:r},n,s)};const dt={dict_converter:Object.fromEntries};var yt={type:\\\"pyodide\\\",module:(e=\\\"0.24.1\\\")=>`https://cdn.jsdelivr.net/pyodide/v${e}/full/pyodide.mjs`,async engine({loadPyodide:e},t,r){const{stderr:n,stdout:s,get:o}=Je(),a=r.slice(0,r.lastIndexOf(\\\"/\\\")),i=await o(e({stderr:n,stdout:s,indexURL:a}));if(t.files&&await Ye(this,i,t.files),t.fetch&&await ze(this,i,t.fetch),t.js_modules&&await Ge(this,i,t.js_modules),t.packages){await i.loadPackage(\\\"micropip\\\");const e=await i.pyimport(\\\"micropip\\\");await e.install(t.packages,{keep_going:!0}),e.destroy()}return i},registerJSModule:ct,run:lt,runAsync:ut,runEvent:ft,transform:(e,t)=>t instanceof e.ffi.PyProxy?t.toJs(dt):t,writeFile:({FS:e,PATH:t,_module:{PATH_FS:r}},n,s)=>Ie({FS:e,PATH:t,PATH_FS:r},n,s)};const ht=\\\"ruby-wasm-wasi\\\",gt=ht.replace(/\\\\W+/g,\\\"_\\\");var wt={type:ht,experimental:!0,module:(e=\\\"2.2.0\\\")=>`https://cdn.jsdelivr.net/npm/ruby-3_2-wasm-wasi@${e}/dist/browser.esm.js`,async engine({DefaultRubyVM:e},t,r){const n=await fetch(`${r.slice(0,r.lastIndexOf(\\\"/\\\"))}/ruby.wasm`),s=await WebAssembly.compile(await n.arrayBuffer()),{vm:o}=await e(s);return t.files&&await Ye(this,o,t.files),t.fetch&&await ze(this,o,t.fetch),o},registerJSModule(e,t,r){const n=`__module_${gt}_${t}`;globalThis[n]=r,this.run(e,`require \\\"js\\\";$${t}=JS.global[:${n}]`),delete globalThis[n]},run:(e,t,...r)=>e.eval(Ve(t),...r),runAsync:(e,t,...r)=>e.evalAsync(Ve(t),...r),async runEvent(e,t,r){if(/^xworker\\\\.(on\\\\w+)$/.test(t)){const{$1:t}=RegExp,n=`__module_${gt}_event`;globalThis[n]=r,this.run(e,`require \\\"js\\\";$xworker.call(\\\"${t}\\\",JS.global[:${n}])`),delete globalThis[n]}else{const n=this.run(e,`method(:${t})`);await n.call(t,e.wrap(r))}},transform:(e,t)=>t,writeFile:()=>{throw new Error(`writeFile is not supported in ${ht}`)}};var mt={type:\\\"wasmoon\\\",module:(e=\\\"1.15.1\\\")=>`https://cdn.jsdelivr.net/npm/wasmoon@${e}/+esm`,async engine({LuaFactory:e,LuaLibraries:t},r){const{stderr:n,stdout:s,get:o}=Je(),a=await o((new e).createEngine());return a.global.getTable(t.Base,(e=>{a.global.setField(e,\\\"print\\\",s),a.global.setField(e,\\\"printErr\\\",n)})),r.files&&await Ye(this,a,r.files),r.fetch&&await ze(this,a,r.fetch),a},registerJSModule:(e,t,r)=>{e.global.set(t,r)},run:(e,t,...r)=>{try{return e.doStringSync(Ve(t),...r)}catch(t){Be.get(e).stderr(t)}},runAsync:async(e,t,...r)=>{try{return await e.doString(Ve(t),...r)}catch(t){Be.get(e).stderr(t)}},runEvent:async(e,t,r)=>{const[n,...s]=t.split(\\\".\\\");let o,a=e.global.get(n);for(const e of s)[o,a]=[a,a[e]];try{await a.call(o,r)}catch(t){Be.get(e).stderr(t)}},transform:(e,t)=>t,writeFile:({cmodule:{module:{FS:e}}},t,r)=>((e,t,r)=>(De(e,Le(t)),t=Ce(e,t),e.writeFile(t,new Uint8Array(r),{canOwn:!0})))(e,t,r)};const bt=new Map,vt=new Map,$t=new Proxy(new Map,{get(e,t){if(!e.has(t)){const[r,...n]=t.split(\\\"@\\\"),s=bt.get(r),o=/^(?:\\\\.?\\\\.?\\\\/|https?:\\\\/\\\\/)/i.test(n)?n.join(\\\"@\\\"):s.module(...n);e.set(t,{url:o,module:import(o),engine:s.engine.bind(s)})}const{url:r,module:n,engine:s}=e.get(t);return(e,o)=>n.then((n=>{vt.set(t,e);for(const t of[\\\"files\\\",\\\"fetch\\\"]){const r=e?.[t];r&&Ue.set(r,o)}return s(n,e,r)}))}}),St=e=>{for(const t of[].concat(e.type))bt.set(t,e)};for(const e of[pt,yt,wt,mt])St(e);const Et=async e=>(await import(\\\"https://cdn.jsdelivr.net/npm/basic-toml@0.3.1/es.js\\\")).parse(e),At=(e,t,r={})=>{if(t){const[e,n]=(e=>{let t=typeof e;return\\\"string\\\"===t&&/\\\\.(json|toml|txt)$/.test(e)?t=RegExp.$1:e=\\\"./config.txt\\\",[ot(e),t]})(t);if(\\\"json\\\"===n)r=fetch(e).then(Fe);else if(\\\"toml\\\"===n)r=fetch(e).then(Re).then(Et);else if(\\\"string\\\"===n)try{r=JSON.parse(t)}catch(e){r=Et(t)}else\\\"object\\\"===n&&t&&(r=t);t=e}return st(r).then((r=>$t[e](r,t)))},Pt=\\\"BeforeRun\\\",jt=\\\"AfterRun\\\",Mt=[`code${Pt}`,`code${Pt}Async`,`code${jt}`,`code${jt}Async`],kt=[\\\"onWorker\\\",\\\"onReady\\\",`on${Pt}`,`on${Pt}Async`,`on${jt}`,`on${jt}Async`];function xt(e,t){const{run:r,runAsync:n}=bt.get(this.type);return{...e,run:r.bind(this,t),runAsync:n.bind(this,t)}}const _t=(e,t,r,n,s,o)=>{if(s||o){const a=xt.bind(e,t),i=n?\\\"runAsync\\\":\\\"run\\\",c=e[i];e[i]=n?async function(e,t,...n){s&&await s.call(this,a(e),r);const i=await c.call(this,e,t,...n);return o&&await o.call(this,a(e),r),i}:function(e,t,...n){s&&s.call(this,a(e),r);const i=c.call(this,e,t,...n);return o&&o.call(this,a(e),r),i}}};try{new SharedArrayBuffer(4)}catch(e){throw new Error([\\\"Unable to use SharedArrayBuffer due insecure environment.\\\",\\\"Please read requirements in MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements\\\"].join(\\\"\\\\n\\\"))}let Tt,Ot,Wt;const Ft=(e,t)=>{addEventListener(e,t||(async t=>{try{await Tt,Ot(`xworker.on${e}`,t)}catch(e){postMessage(e)}}),!!t&&{once:!0})},{parse:Rt,stringify:Bt}=f,{proxy:Jt,window:It,isWindowProxy:Lt}=Te(self,{parse:Rt,stringify:Bt,transform:e=>Wt?Wt(e):e}),Dt={sync:Jt,window:It,isWindowProxy:Lt,onmessage:console.info,onerror:console.error,onmessageerror:console.warn,postMessage:postMessage.bind(self)};Ft(\\\"message\\\",(({data:{options:e,config:t,code:r,hooks:n}})=>{Tt=(async()=>{try{const{id:s,tag:o,type:a,custom:i,version:c,config:l,async:u}=e,f=await At(((e,t=\\\"\\\")=>`${e}@${t}`.replace(/@$/,\\\"\\\"))(a,c),t,l),p=Ze(bt.get(a)),d=((e,t,r,n)=>({type:t,config:r,interpreter:n,io:Be.get(n),run:(t,...r)=>e.run(n,t,...r),runAsync:(t,...r)=>e.runAsync(n,t,...r),runEvent:(...t)=>e.runEvent(n,...t)}))(p,i||a,l,f);let y=\\\"run\\\";if(u&&(y+=\\\"Async\\\"),n){const e=((e,t)=>(r,n)=>{const s=e[t].bind(e);e[t]=(e,t,...o)=>s(e,`${n?r:t}\\\\n${n?t:r}`,...o)})(p,y);let t,r,s=\\\"\\\",o=\\\"\\\";for(const e of Mt){const t=n[e];if(t){const r=e.endsWith(\\\"Async\\\");(r&&u||!r&&!u)&&(e.startsWith(\\\"codeBefore\\\")?s=t:o=t)}}o&&e(o,!1),s&&e(s,!0);for(const e of kt.slice(2)){const s=n[e];if(s){const n=e.endsWith(\\\"Async\\\");if(n&&u||!n&&!u){const n=it(s);e.startsWith(\\\"onBefore\\\")?t=n:r=n}}}_t(p,d,Dt,u,t,r)}const{CustomEvent:h,document:g}=It,w=s&&g.getElementById(s)||null,m=e=>at(w,i||a,e,!0,h);let b=\\\"\\\";return p.registerJSModule(f,\\\"polyscript\\\",{xworker:Dt,get target(){return!b&&w&&(\\\"SCRIPT\\\"===o?w.after(Xe(g.createElement(`script-${i||a}`),{id:b=`${s}-target`})):(b=s,w.replaceChildren(),w.style.display=\\\"block\\\")),b}}),Ot=p.runEvent.bind(p,f),Wt=p.transform.bind(p,f),w&&m(\\\"ready\\\"),n?.onReady&&it(n?.onReady).call(p,xt.call(p,d,f),Dt),await p[y](f,r),w&&m(\\\"done\\\"),f}catch(e){postMessage(e)}})(),Ft(\\\"error\\\"),Ft(\\\"message\\\"),Ft(\\\"messageerror\\\")}));\\n\"],{type:'application/javascript'})),{type:'module'});","export const INVALID_CONTENT = 'Invalid content';\nexport const INVALID_SRC_ATTR = 'Invalid worker attribute';\nexport const INVALID_WORKER_ATTR = 'Invalid worker attribute';\n","import { INVALID_CONTENT, INVALID_SRC_ATTR, INVALID_WORKER_ATTR } from '../errors.js';\n\nimport { dedent, unescape } from '../utils.js';\n\nconst hasCommentsOnly = text => !text\n    .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '')\n    .replace(/^\\s*(?:\\/\\/|#).*/gm, '')\n    .trim()\n;\n\n/* c8 ignore start */ // tested via integration\nexport default element => {\n  const { src, worker } = element.attributes;\n  if (worker) {\n      let { value } = worker;\n      // throw on worker values as ambiguous\n      // @see https://github.com/pyscript/polyscript/issues/43\n      if (value) throw new SyntaxError(INVALID_WORKER_ATTR);\n      value = src?.value;\n      if (!value) {\n          // throw on empty src attributes\n          if (src) throw new SyntaxError(INVALID_SRC_ATTR);\n          if (!element.childElementCount)\n              value = element.textContent;\n          else {\n              const { innerHTML, localName, type } = element;\n              const name = type || localName.replace(/-script$/, '');\n              value = unescape(innerHTML);\n              console.warn(\n                  `Deprecated: use <script type=\"${name}\"> for an always safe content parsing:\\n`,\n                  value,\n              );\n          }\n\n          const url = URL.createObjectURL(new Blob([dedent(value)], { type: 'text/plain' }));\n          // TODO: should we really clean up this? debugging non-existent resources\n          //       at distance might be very problematic if the url is revoked.\n          // setTimeout(URL.revokeObjectURL, 5000, url);\n          return url;\n      }\n      return value;\n  }\n  // validate ambiguous cases with src and not empty/commented content\n  if (src && !hasCommentsOnly(element.textContent))\n    throw new SyntaxError(INVALID_CONTENT);\n};\n/* c8 ignore stop */\n","import { $ } from 'basic-devtools';\n\nimport $xworker from './worker/class.js';\nimport workerURL from './worker/url.js';\nimport { getRuntime, getRuntimeID } from './loader.js';\nimport { registry } from './interpreters.js';\nimport { all, dispatch, resolve, defineProperty, nodeInfo } from './utils.js';\nimport { getText } from './fetch-utils.js';\n\nconst getRoot = (script) => {\n    let parent = script;\n    while (parent.parentNode) parent = parent.parentNode;\n    return parent;\n};\n\nexport const queryTarget = (script, idOrSelector) => {\n    const root = getRoot(script);\n    return root.getElementById(idOrSelector) || $(idOrSelector, root);\n};\n\nconst targets = new WeakMap();\nconst targetDescriptor = {\n    get() {\n        let target = targets.get(this);\n        if (!target) {\n            target = document.createElement(`${this.type}-script`);\n            targets.set(this, target);\n            handle(this);\n        }\n        return target;\n    },\n    set(target) {\n        if (typeof target === 'string')\n            targets.set(this, queryTarget(this, target));\n        else {\n            targets.set(this, target);\n            handle(this);\n        }\n    },\n};\n\nconst handled = new WeakMap();\n\nexport const interpreters = new Map();\n\nconst execute = async (script, source, XWorker, isAsync) => {\n    const { type } = script;\n    const module = registry.get(type);\n    /* c8 ignore start */\n    if (module.experimental)\n        console.warn(`The ${type} interpreter is experimental`);\n    const [interpreter, content] = await all([\n        handled.get(script).interpreter,\n        source,\n    ]);\n    try {\n        // temporarily override inherited document.currentScript in a non writable way\n        // but it deletes it right after to preserve native behavior (as it's sync: no trouble)\n        defineProperty(document, 'currentScript', {\n            configurable: true,\n            get: () => script,\n        });\n        module.registerJSModule(interpreter, 'polyscript', { XWorker });\n        dispatch(script, type, 'ready');\n        const result = module[isAsync ? 'runAsync' : 'run'](interpreter, content);\n        const done = dispatch.bind(null, script, type, 'done');\n        if (isAsync) result.then(done);\n        else done();\n        return result;\n    } finally {\n        delete document.currentScript;\n    }\n    /* c8 ignore stop */\n};\n\nconst getValue = (ref, prefix) => {\n    const value = ref?.value;\n    return value ? prefix + value : '';\n};\n\nexport const getDetails = (type, id, name, version, config, runtime = type) => {\n    if (!interpreters.has(id)) {\n        const details = {\n            interpreter: getRuntime(name, config),\n            queue: resolve(),\n            XWorker: $xworker(type, version),\n        };\n        interpreters.set(id, details);\n        // enable sane defaults when single interpreter *of kind* is used in the page\n        // this allows `xxx-*` attributes to refer to such interpreter without `env` around\n        /* c8 ignore start *//* this is tested very well in PyScript */\n        if (!interpreters.has(type)) interpreters.set(type, details);\n        if (!interpreters.has(runtime)) interpreters.set(runtime, details);\n        /* c8 ignore stopt */\n    }\n    return interpreters.get(id);\n};\n\n/**\n * @param {HTMLScriptElement} script a special type of <script>\n */\nexport const handle = async (script) => {\n    // known node, move its companion target after\n    // vDOM or other use cases where the script is a tracked element\n    if (handled.has(script)) {\n        const { target } = script;\n        if (target) {\n            // if the script is in the head just append target to the body\n            if (script.closest('head')) document.body.append(target);\n            // in any other case preserve the script position\n            else script.after(target);\n        }\n    }\n    // new script to handle ... allow newly created scripts to work\n    // just exactly like any other script would\n    else {\n        // allow a shared config among scripts, beside interpreter,\n        // and/or source code with different config or interpreter\n        const {\n            attributes: { async: isAsync, config, env, target, version },\n            src,\n            type,\n        } = script;\n\n        const versionValue = version?.value;\n        const name = getRuntimeID(type, versionValue);\n        let configValue = getValue(config, '|');\n        const id = getValue(env, '') || `${name}${configValue}`;\n        configValue = configValue.slice(1);\n\n        /* c8 ignore start */\n        const url = workerURL(script);\n        if (url) {\n            const XWorker = $xworker(type, versionValue);\n            const xworker = new XWorker(url, {\n                ...nodeInfo(script, type),\n                async: !!isAsync,\n                config: configValue\n            });\n            handled.set(\n                defineProperty(script, 'xworker', { value: xworker }),\n                { xworker }\n            );\n            return;\n        }\n        /* c8 ignore stop */\n\n        const targetValue = getValue(target, '');\n        const details = getDetails(type, id, name, versionValue, configValue);\n\n        handled.set(\n            defineProperty(script, 'target', targetDescriptor),\n            details,\n        );\n\n        if (targetValue) targets.set(script, queryTarget(script, targetValue));\n\n        // start fetching external resources ASAP\n        const source = src ? fetch(src).then(getText) : script.textContent;\n        details.queue = details.queue.then(() =>\n            execute(script, source, details.XWorker, !!isAsync),\n        );\n    }\n};\n","import { $x } from 'basic-devtools';\n\nimport { interpreters } from './script-handler.js';\nimport { all, create } from './utils.js';\nimport { registry, prefixes } from './interpreters.js';\n\nexport const env = new Proxy(create(null), {\n    get: (_, name) => new Promise(queueMicrotask).then(\n        () => awaitInterpreter(name)\n    ),\n});\n\n/* c8 ignore start */ // attributes are tested via integration / e2e\n// ensure both interpreter and its queue are awaited then returns the interpreter\nconst awaitInterpreter = async (key) => {\n    if (interpreters.has(key)) {\n        const { interpreter, queue } = interpreters.get(key);\n        return (await all([interpreter, queue]))[0];\n    }\n\n    const available = interpreters.size\n        ? `Available interpreters are: ${[...interpreters.keys()]\n              .map((r) => `\"${r}\"`)\n              .join(', ')}.`\n        : 'There are no interpreters in this page.';\n\n    throw new Error(`The interpreter \"${key}\" was not found. ${available}`);\n};\n\nexport const listener = async (event) => {\n    const { type, currentTarget } = event;\n    if (!prefixes.length) return;\n    for (let { name, value, ownerElement: el } of $x(\n        `./@*[${prefixes.map((p) => `name()=\"${p}${type}\"`).join(' or ')}]`,\n        currentTarget,\n    )) {\n        name = name.slice(0, -(type.length + 1));\n        const interpreter = await awaitInterpreter(\n            el.getAttribute(`${name}-env`) || name,\n        );\n        const handler = registry.get(name);\n        handler.runEvent(interpreter, value, event);\n    }\n};\n\n/**\n * Look for known prefixes and add related listeners.\n * @param {Document | Element} root\n */\nexport const addAllListeners = (root) => {\n    if (!prefixes.length) return;\n    for (let { name, ownerElement: el } of $x(\n        `.//@*[${prefixes\n            .map((p) => `starts-with(name(),\"${p}\")`)\n            .join(' or ')}]`,\n        root,\n    )) {\n        const i = name.lastIndexOf('-');\n        const type = name.slice(i + 1);\n        if (type !== 'env') {\n            el.addEventListener(type, listener);\n            // automatically disable form controls that are not disabled already\n            if ('disabled' in el && !el.disabled) {\n                el.disabled = true;\n                // set these to enable once the interpreter is known (registered + loaded)\n                env[name.slice(0, i)].then(() => {\n                    el.disabled = false;\n                });\n            }\n        }\n    }\n};\n/* c8 ignore stop */\n","import xworker from './worker/class.js';\nimport Hook from './worker/hook.js';\n\nconst XWorker = xworker();\n\nexport { Hook, XWorker };\n","import '@ungap/with-resolvers';\nimport { $$ } from 'basic-devtools';\n\nimport { assign, create, createOverload, createResolved, dedent, defineProperty, nodeInfo } from './utils.js';\nimport { getDetails } from './script-handler.js';\nimport { registry as defaultRegistry, prefixes, configs } from './interpreters.js';\nimport { getRuntimeID } from './loader.js';\nimport { addAllListeners } from './listeners.js';\nimport { Hook, XWorker } from './xworker.js';\nimport { polluteJS, js as jsHooks, code as codeHooks } from './hooks.js';\nimport workerURL from './worker/url.js';\n\nexport const CUSTOM_SELECTORS = [];\n\n/**\n * @typedef {Object} Runtime custom configuration\n * @prop {object} interpreter the bootstrapped interpreter\n * @prop {(url:string, options?: object) => Worker} XWorker an XWorker constructor that defaults to same interpreter on the Worker.\n * @prop {object} config a cloned config used to bootstrap the interpreter\n * @prop {(code:string) => any} run an utility to run code within the interpreter\n * @prop {(code:string) => Promise<any>} runAsync an utility to run code asynchronously within the interpreter\n * @prop {(path:string, data:ArrayBuffer) => void} writeFile an utility to write a file in the virtual FS, if available\n */\n\nconst types = new Map();\nconst waitList = new Map();\n\n// REQUIRES INTEGRATION TEST\n/* c8 ignore start */\n/**\n * @param {Element} node any DOM element registered via define.\n */\nexport const handleCustomType = (node) => {\n    for (const selector of CUSTOM_SELECTORS) {\n        if (node.matches(selector)) {\n            const type = types.get(selector);\n            const details = registry.get(type);\n            const { resolve } = waitList.get(type);\n            const { options, known } = details;\n            if (!known.has(node)) {\n                known.add(node);\n                const {\n                    interpreter: runtime,\n                    config,\n                    version,\n                    env,\n                    onerror,\n                    hooks,\n                } = options;\n\n                let error;\n                try {\n                    const worker = workerURL(node);\n                    if (worker) {\n                        const xworker = XWorker.call(new Hook(null, hooks), worker, {\n                            ...nodeInfo(node, type),\n                            version,\n                            type: runtime,\n                            custom: type,\n                            config: node.getAttribute('config') || config || {},\n                            async: node.hasAttribute('async')\n                        });\n                        defineProperty(node, 'xworker', { value: xworker });\n                        resolve({ type, xworker });\n                        return;\n                    }\n                }\n                // let the custom type handle errors via its `io`\n                catch (workerError) {\n                    error = workerError;\n                }\n\n                const name = getRuntimeID(runtime, version);\n                const id = env || `${name}${config ? `|${config}` : ''}`;\n                const { interpreter: engine, XWorker: Worker } = getDetails(\n                    type,\n                    id,\n                    name,\n                    version,\n                    config,\n                    runtime\n                );\n                engine.then((interpreter) => {\n                    const module = create(defaultRegistry.get(runtime));\n\n                    const hook = new Hook(interpreter, hooks);\n\n                    const XWorker = function XWorker(...args) {\n                        return Worker.apply(hook, args);\n                    };\n\n                    const resolved = {\n                        ...createResolved(\n                            module,\n                            type,\n                            structuredClone(configs.get(name)),\n                            interpreter,\n                        ),\n                        XWorker,\n                    };\n\n                    module.registerJSModule(interpreter, 'polyscript', { XWorker });\n\n                    // patch methods accordingly to hooks (and only if needed)\n                    for (const suffix of ['Run', 'RunAsync']) {\n                        const overload = createOverload(module, `r${suffix.slice(1)}`);\n\n                        let before = '';\n                        let after = '';\n\n                        for (const key of codeHooks) {\n                            const value = hooks?.main?.[key];\n                            if (value && key.endsWith(suffix)) {\n                                if (key.startsWith('codeBefore'))\n                                    before = dedent(value());\n                                else\n                                    after = dedent(value());\n                            }\n                        }\n\n                        // append code that should be executed *after* first\n                        if (after) overload(after, false);\n\n                        // prepend code that should be executed *before* (so that after is post-patched)\n                        if (before) overload(before, true);\n\n                        let beforeCB, afterCB;\n                        // ignore onReady and onWorker\n                        for (let i = 2; i < jsHooks.length; i++) {\n                            const key = jsHooks[i];\n                            const value = hooks?.main?.[key];\n                            if (value && key.endsWith(suffix)) {\n                                if (key.startsWith('onBefore'))\n                                    beforeCB = value;\n                                else\n                                    afterCB = value;\n                            }\n                        }\n                        polluteJS(module, resolved, node, suffix.endsWith('Async'), beforeCB, afterCB);\n                    }\n\n                    details.queue = details.queue.then(() => {\n                        resolve(resolved);\n                        if (error) onerror?.(error, node);\n                        return hooks?.main?.onReady?.(resolved, node);\n                    });\n                });\n            }\n        }\n    }\n};\n\n/**\n * @type {Map<string, {options:object, known:WeakSet<Element>}>}\n */\nconst registry = new Map();\n\n/**\n * @typedef {Object} CustomOptions custom configuration\n * @prop {'pyodide' | 'micropython' | 'wasmoon' | 'ruby-wasm-wasi'} interpreter the interpreter to use\n * @prop {string} [version] the optional interpreter version to use\n * @prop {string} [config] the optional config to use within such interpreter\n */\n\nlet dontBotherCount = 0;\n\n/**\n * Allows custom types and components on the page to receive interpreters to execute any code\n * @param {string} type the unique `<script type=\"...\">` identifier\n * @param {CustomOptions} options the custom type configuration\n */\nexport const define = (type, options) => {\n    // allow no-type to be bootstrapped out of the box\n    let dontBother = type == null;\n\n    if (dontBother)\n        type = `_ps${dontBotherCount++}`;\n    else if (defaultRegistry.has(type) || registry.has(type))\n        throw new Error(`<script type=\"${type}\"> already registered`);\n\n    if (!defaultRegistry.has(options?.interpreter))\n        throw new Error('Unspecified interpreter');\n\n    // allows reaching out the interpreter helpers on events\n    defaultRegistry.set(type, defaultRegistry.get(options.interpreter));\n\n    // allows selector -> registry by type\n    const selectors = [`script[type=\"${type}\"]`];\n\n    // ensure a Promise can resolve once a custom type has been bootstrapped\n    whenDefined(type);\n\n    if (dontBother) {\n        // add a script then cleanup everything once that's ready\n        const { hooks } = options;\n        const onReady = hooks?.main?.onReady;\n        options = {\n            ...options,\n            hooks: {\n                ...hooks,\n                main: {\n                    ...hooks?.main,\n                    onReady(resolved, node) {\n                        CUSTOM_SELECTORS.splice(CUSTOM_SELECTORS.indexOf(type), 1);\n                        defaultRegistry.delete(type);\n                        registry.delete(type);\n                        waitList.delete(type);\n                        node.remove();\n                        onReady?.(resolved);\n                    }\n                }\n            },\n        };\n        document.head.append(\n            assign(document.createElement('script'), { type })\n        );\n    }\n    else {\n        selectors.push(`${type}-script`);\n        prefixes.push(`${type}-`);\n    }\n\n    for (const selector of selectors) types.set(selector, type);\n    CUSTOM_SELECTORS.push(...selectors);\n\n    // ensure always same env for this custom type\n    registry.set(type, {\n        options: assign({ env: type }, options),\n        known: new WeakSet(),\n        queue: Promise.resolve(),\n    });\n\n    if (!dontBother) addAllListeners(document);\n    $$(selectors.join(',')).forEach(handleCustomType);\n};\n\n/**\n * Resolves whenever a defined custom type is bootstrapped on the page\n * @param {string} type the unique `<script type=\"...\">` identifier\n * @returns {Promise<object>}\n */\nexport const whenDefined = (type) => {\n    if (!waitList.has(type)) waitList.set(type, Promise.withResolvers());\n    return waitList.get(type).promise;\n};\n/* c8 ignore stop */\n","import stickyModule from 'sticky-module';\nimport { $$ } from 'basic-devtools';\n\nimport { handle } from './script-handler.js';\nimport { assign } from './utils.js';\nimport { selectors, prefixes } from './interpreters.js';\nimport { CUSTOM_SELECTORS, handleCustomType } from './custom.js';\nimport { listener, addAllListeners } from './listeners.js';\n\nimport { define as $define, whenDefined as $whenDefined } from './custom.js';\nimport { env as $env } from './listeners.js';\nimport { Hook as $Hook, XWorker as $XWorker } from './xworker.js';\n\n// avoid multiple initialization of the same library\nconst [\n    {\n        define,\n        whenDefined,\n        env,\n        Hook,\n        XWorker\n    },\n    alreadyLive\n] = stickyModule(\n    'polyscript',\n    {\n        define: $define,\n        whenDefined: $whenDefined,\n        env: $env,\n        Hook: $Hook,\n        XWorker: $XWorker\n    }\n);\n\nexport { define, whenDefined, env, Hook, XWorker };\nexport * from './errors.js';\n\n\nif (!alreadyLive) {\n    const mo = new MutationObserver((records) => {\n        const selector = selectors.join(',');\n        for (const { type, target, attributeName, addedNodes } of records) {\n            // attributes are tested via integration / e2e\n            /* c8 ignore start */\n            if (type === 'attributes') {\n                const i = attributeName.lastIndexOf('-') + 1;\n                if (i) {\n                    const prefix = attributeName.slice(0, i);\n                    for (const p of prefixes) {\n                        if (prefix === p) {\n                            const type = attributeName.slice(i);\n                            if (type !== 'env') {\n                                const method = target.hasAttribute(attributeName)\n                                    ? 'add'\n                                    : 'remove';\n                                target[`${method}EventListener`](type, listener);\n                            }\n                            break;\n                        }\n                    }\n                }\n                continue;\n            }\n            for (const node of addedNodes) {\n                if (node.nodeType === 1) {\n                    addAllListeners(node);\n                    if (selector && node.matches(selector)) handle(node);\n                    else bootstrap(selector, node, true);\n                }\n            }\n            /* c8 ignore stop */\n        }\n    });\n\n    /* c8 ignore start */\n    const bootstrap = (selector, node, shouldHandle) => {\n        if (selector) $$(selector, node).forEach(handle);\n        selector = CUSTOM_SELECTORS.join(',');\n        if (selector) {\n            if (shouldHandle) handleCustomType(node);\n            $$(selector, node).forEach(handleCustomType);\n        }\n    };\n    /* c8 ignore stop */\n\n    const observe = (root) => {\n        mo.observe(root, { childList: true, subtree: true, attributes: true });\n        return root;\n    };\n\n    const { attachShadow } = Element.prototype;\n    assign(Element.prototype, {\n        attachShadow(init) {\n            return observe(attachShadow.call(this, init));\n        },\n    });\n\n    // give 3rd party a chance to apply changes before this happens\n    queueMicrotask(() => {\n        addAllListeners(observe(document));\n        bootstrap(selectors.join(','), document, false);\n    });\n\n}\n"],"names":["$$","css","root","document","querySelectorAll","$x","path","xpath","XPathEvaluator","createExpression","evaluate","XPathResult","ORDERED_NODE_SNAPSHOT_TYPE","result","i","snapshotLength","push","snapshotItem","env","self","globalThis","deserialize","serialized","$","_","as","out","index","set","unpair","has","get","type","value","arr","object","key","Date","source","flags","RegExp","map","Map","Set","add","name","message","BigInt","Object","deserializer","EMPTY","toString","keys","typeOf","asString","call","slice","includes","shouldSkip","TYPE","serialize","json","lossy","strict","pair","entry","TypeError","valueOf","toJSON","entries","toISOString","serializer","parse","$parse","stringify","$stringify","JSON","options","str","any","CHANNEL","MAIN","THREAD","ARRAY","FUNCTION","NULL","NUMBER","OBJECT","STRING","SYMBOL","UNDEFINED","APPLY","CONSTRUCT","DEFINE_PROPERTY","DELETE_PROPERTY","GET","GET_OWN_PROPERTY_DESCRIPTOR","GET_PROTOTYPE_OF","HAS","IS_EXTENSIBLE","OWN_KEYS","PREVENT_EXTENSION","SET","SET_PROTOTYPE_OF","DELETE","waitAsyncFallback","buffer","Promise","onmessage","w","Worker","postMessage","Int32Array","SharedArrayBuffer","Uint16Array","BYTES_PER_ELEMENT","I32_BYTES","UI16_BYTES","isArray","Array","notify","wait","waitAsync","Atomics","buffers","WeakSet","context","WeakMap","syncResult","then","fn","uid","coincident","transform","interrupt","post","transfer","args","handler","delay","decoder","TextDecoder","waitFor","isAsync","sb","waitInterrupt","seppuku","Proxy","action","startsWith","id","at","delete","pop","deadlock","setTimeout","console","warn","clearTimeout","length","bytes","decode","actions","callback","Error","size","results","addEventListener","async","event","details","data","stopImmediatePropagation","rest","error","ui16a","charCodeAt","registry","FinalizationRegistry","onGarbageCollected","held","debug","String","create","hold","return","R","token","target","register","unwrapDefault","unwrap","wrap","revive","wrapDefault","resolve","unbound","what","this","defineProperty","deleteProperty","getOwnPropertyDescriptor","getPrototypeOf","isExtensible","ownKeys","preventExtensions","setPrototypeOf","Reflect","assign","TypedArray","Int8Array","augment","descriptor","how","asEntry","symbols","Symbol","filter","s","symbol","o","main","patch","eventsHandler","EventTarget","prototype","listener","invoke","concat","handleEvent","currentTarget","method","thread","ids","values","__thread__","global","sid","asValue","cb","Event","WeakRef","createGCHook","deref","trapsHandler","thisArg","apply","proto","trap","proxy","toLowerCase","__proxy__","__main__","proxies","argument","bind","bound","proxyHandler","fromEntry","TRAP","ctx","Worker$1","$coincident","util","withResolvers","a","b","c","reject","promise","getBuffer","response","arrayBuffer","getJSON","getText","text","dedent","string","t","l","arguments","content","line","split","trim","test","replace","$1","es","unes","cape","m","tpl","unescape","un","defineProperties","all","absoluteURL","base","location","href","URL","nodeInfo","node","tag","tagName","dispatch","worker","CE","CustomEvent","dispatchEvent","bubbles","detail","createResolved","module","config","interpreter","io","run","code","runAsync","runEvent","createOverload","pre","stdio","init","localIO","stderr","stdout","log","engine","writeFile","FS","PATH","PATH_FS","absPath","mkdirTree","dirname","Uint8Array","canOwn","tree","join","current","branch","mkdir","cwd","joinPaths","parts","res","part","p","fetchResolved","config_fetch","url","fetch","fetchPaths","files","to_file","from","undefined","endsWith","flatMap","to_folder","file","filename","lastIndexOf","calculateFetchPaths","fillName","dest","parseTemplate","src","k","SyntaxError","fetchFiles","config_files","targets","sourceDest","calculateFilesPaths","fetchJSModules","js_modules","modules","import","esm","registerJSModule","err","registerJsModule","runPython","runPythonAsync","globals","micropython","version","loadMicroPython","_module","toJsOptions","dict_converter","fromEntries","pyodide","loadPyodide","indexURL","packages","loadPackage","micropip","pyimport","install","keep_going","destroy","ffi","PyProxy","toJs","jsType","ruby_wasm_wasi","experimental","DefaultRubyVM","WebAssembly","compile","vm","eval","evalAsync","wasmoon","LuaFactory","LuaLibraries","createEngine","getTable","Base","setField","doStringSync","doString","cmodule","writeFileShim","configs","selectors","prefixes","baseURL","getConfigURLAndType","getRuntime","absolute","getRuntimeID","beforeRun","afterRun","js","resolved","polluteJS","ref","before","after","patched","Hook$1","constructor","hooks","onWorker","jsHooks","codeHooks","xworker","createObjectURL","Blob","isHook","Hook","bootstrap","sync","onerror","writable","configurable","INVALID_CONTENT","INVALID_SRC_ATTR","INVALID_WORKER_ATTR","workerURL","element","attributes","childElementCount","innerHTML","localName","textContent","queryTarget","script","idOrSelector","parent","parentNode","getRoot","getElementById","querySelector","targetDescriptor","createElement","handle","handled","interpreters","getValue","prefix","getDetails","runtime","queue","XWorker","$xworker","closest","body","append","versionValue","configValue","targetValue","done","currentScript","execute","queueMicrotask","awaitInterpreter","available","r","ownerElement","el","getAttribute","addAllListeners","disabled","CUSTOM_SELECTORS","types","waitList","handleCustomType","selector","matches","known","custom","hasAttribute","workerError","defaultRegistry","hook","structuredClone","suffix","overload","beforeCB","afterCB","onReady","dontBotherCount","whenDefined","define","alreadyLive","for","stickyModule","dontBother","splice","indexOf","remove","head","forEach","$whenDefined","$env","$Hook","$XWorker","mo","MutationObserver","records","attributeName","addedNodes","nodeType","shouldHandle","observe","childList","subtree","attachShadow","Element"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25]}